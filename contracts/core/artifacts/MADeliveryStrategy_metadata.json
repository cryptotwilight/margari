{
	"compiler": {
		"version": "0.8.23+commit.f704f362"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_register",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_allo",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "Allocated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "Distributed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"name": "PoolActive",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "Registered",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_allocator",
						"type": "address"
					}
				],
				"name": "addAllocator",
				"outputs": [
					{
						"internalType": "bool",
						"name": "_added",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "allocate",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_recipientIds",
						"type": "address[]"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "distribute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllo",
				"outputs": [
					{
						"internalType": "contract IAllo",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getName",
				"outputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_recipientIds",
						"type": "address[]"
					},
					{
						"internalType": "bytes[]",
						"name": "_data",
						"type": "bytes[]"
					}
				],
				"name": "getPayouts",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "recipientAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}
						],
						"internalType": "struct IStrategy.PayoutSummary[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPoolAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPoolId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getProjects",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "_projects",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipientId",
						"type": "address"
					}
				],
				"name": "getRecipientStatus",
				"outputs": [
					{
						"internalType": "enum IStrategy.Status",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getStrategyId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVersion",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_version",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "increasePoolAmount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPoolActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_allocator",
						"type": "address"
					}
				],
				"name": "isValidAllocator",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "registerRecipient",
				"outputs": [
					{
						"internalType": "address",
						"name": "recipientId",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"Allocated(address,uint256,address,address)": {
					"params": {
						"amount": "The amount allocated",
						"recipientId": "The ID of the recipient",
						"token": "The token allocated"
					}
				},
				"Distributed(address,address,uint256,address)": {
					"params": {
						"amount": "The amount distributed",
						"recipientAddress": "The recipient",
						"recipientId": "The ID of the recipient",
						"sender": "The sender"
					}
				},
				"Initialized(uint256,bytes)": {
					"params": {
						"data": "The data passed to the 'initialize' function",
						"poolId": "The ID of the pool"
					}
				},
				"PoolActive(bool)": {
					"params": {
						"active": "The status of the pool"
					}
				},
				"Registered(address,bytes,address)": {
					"params": {
						"data": "The data passed to the 'registerRecipient' function",
						"recipientId": "The ID of the recipient",
						"sender": "The sender"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"allocate(bytes,address)": {
					"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
					"params": {
						"_data": "The data to use to allocate to the recipient",
						"_sender": "The address of the sender"
					}
				},
				"distribute(address[],bytes,address)": {
					"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
					"params": {
						"_data": "The data to use to distribute to the recipients",
						"_recipientIds": "The IDs of the recipients",
						"_sender": "The address of the sender"
					}
				},
				"getAllo()": {
					"returns": {
						"_0": "The Allo contract"
					}
				},
				"getPayouts(address[],bytes[])": {
					"details": "The encoded '_data' will be determined by the strategy implementation.",
					"params": {
						"_data": "The data to use to get the payout summary for the recipients",
						"_recipientIds": "The IDs of the recipients"
					},
					"returns": {
						"_0": "The payout summary for the recipients"
					}
				},
				"getPoolAmount()": {
					"returns": {
						"_0": "The balance of the pool"
					}
				},
				"getPoolId()": {
					"returns": {
						"_0": "The ID of the pool"
					}
				},
				"getRecipientStatus(address)": {
					"params": {
						"_recipientId": "The ID of the recipient"
					},
					"returns": {
						"_0": "The status of the recipient"
					}
				},
				"getStrategyId()": {
					"returns": {
						"_0": "The ID of the strategy"
					}
				},
				"increasePoolAmount(uint256)": {
					"details": "Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.",
					"params": {
						"_amount": "The amount to increase the pool by"
					}
				},
				"initialize(uint256,bytes)": {
					"params": {
						"_data": "The encoded data",
						"_poolId": "The ID of the pool"
					}
				},
				"isPoolActive()": {
					"returns": {
						"_0": "'true' if the pool is active, otherwise 'false'"
					}
				},
				"isValidAllocator(address)": {
					"details": "How the allocator is determined is up to the strategy implementation.",
					"params": {
						"_allocator": "The address to check if it is a valid allocator for the strategy."
					},
					"returns": {
						"_0": "'true' if the address is a valid allocator, 'false' otherwise"
					}
				},
				"registerRecipient(bytes,address)": {
					"details": "Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.",
					"params": {
						"_data": "The data to use to register the recipient",
						"_sender": "The address of the sender"
					},
					"returns": {
						"recipientId": "The recipientId"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"Allocated(address,uint256,address,address)": {
					"notice": "Emitted when a recipient is allocated to."
				},
				"Distributed(address,address,uint256,address)": {
					"notice": "Emitted when tokens are distributed."
				},
				"Initialized(uint256,bytes)": {
					"notice": "Emitted when strategy is initialized."
				},
				"PoolActive(bool)": {
					"notice": "Emitted when pool is set to active status."
				},
				"Registered(address,bytes,address)": {
					"notice": "Emitted when a recipient is registered."
				}
			},
			"kind": "user",
			"methods": {
				"allocate(bytes,address)": {
					"notice": "Allocates to a recipient."
				},
				"distribute(address[],bytes,address)": {
					"notice": "Distributes funds (tokens) to recipients."
				},
				"getAllo()": {
					"notice": "Getter for the 'Allo' contract."
				},
				"getPayouts(address[],bytes[])": {
					"notice": "Gets the payout summary for recipients."
				},
				"getPoolAmount()": {
					"notice": "Getter for the 'poolAmount'."
				},
				"getPoolId()": {
					"notice": "Getter for the 'poolId'."
				},
				"getRecipientStatus(address)": {
					"notice": "Getter for the status of a recipient."
				},
				"getStrategyId()": {
					"notice": "Getter for the 'strategyId'."
				},
				"increasePoolAmount(uint256)": {
					"notice": "Increases the pool amount."
				},
				"initialize(uint256,bytes)": {
					"notice": "@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize()."
				},
				"isPoolActive()": {
					"notice": "Getter for whether or not the pool is active."
				},
				"isValidAllocator(address)": {
					"notice": "Checks if the '_allocator' is a valid allocator."
				},
				"registerRecipient(bytes,address)": {
					"notice": "Registers a recipient."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/core/MADeliveryStrategy.sol": "MADeliveryStrategy"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"contracts/core/MADeliveryStrategy.sol": {
			"keccak256": "0xcdfa214593223bb726ac951533d46801da978eb78a36b228887a879c81f2984b",
			"license": "APACHE 2.0",
			"urls": [
				"bzz-raw://abcf8c7ae49b6914fbd5180dad68de55aa6b2bbe94404afd1866c7a03845a9dc",
				"dweb:/ipfs/QmcxhNyoZnnrgH8RJ2DboFTcQKSjiMjUrp5PoTgSLDnWpU"
			]
		},
		"contracts/core/MBaseStrategy.sol": {
			"keccak256": "0xbb4e1ed7dfd300d85f94aab8b0cfb36c33eaaf7bb08e19611a2f3afccfd8d6d8",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://35b49b9e40206776d2f1912709f7637e0e4d37e3a7fd16b52642fe6a867b5286",
				"dweb:/ipfs/QmaP39Rcm4Kv6SUvTs2Gu4ZWuvJ1wxT3jUSRuLuiNcvd8D"
			]
		},
		"contracts/interfaces/IMProject.sol": {
			"keccak256": "0xcdb6c282023b61d7d517262405bece16512fef6761686323819e1ff83f0f417a",
			"license": "APACHE 2.0",
			"urls": [
				"bzz-raw://84d68959cfa5bdee89c2d2718d3a04683b7cb722be37700028a3e8c6a4a6727f",
				"dweb:/ipfs/QmNeSawG529AypTfZ88HEH3YTtPL9e494j7RB5EwuQUYDq"
			]
		},
		"contracts/interfaces/IMRegister.sol": {
			"keccak256": "0xb2364f73159afc2d717b844ba80a4af54d36c0b3142c7cd540c939f595803714",
			"license": "APACHE 2.0",
			"urls": [
				"bzz-raw://a4ee87280b6bff80c38fead8a4b32f2851e2db85f88ef4fa8875c31b35a76df9",
				"dweb:/ipfs/QmbgtNAAMUp73yrtPJHvaCtz5XDRDUL9zmbijy3tK4x5rP"
			]
		},
		"contracts/interfaces/IMStructs.sol": {
			"keccak256": "0x6aab2b60204ec059c66fd8dd0d9324b01d45ef2243eb827abdd538caf758e51d",
			"license": "APACHE 2.0",
			"urls": [
				"bzz-raw://89355a76386c051d95338ebe189cac9d8b76d24980a5c31d25360ff744954f54",
				"dweb:/ipfs/QmbtvWefb3V4sZ7bp99hT5PwR2zaEGiCktQrwVyrbHYpEY"
			]
		},
		"contracts/interfaces/IMVersion.sol": {
			"keccak256": "0x313fc3f323f506bf67d81eae3962374edc282ea508cd2e6a0db7b09846e8e2bd",
			"license": "APACHE 2.0",
			"urls": [
				"bzz-raw://52208146c43535fac38a262eb7c808e3b25ef20432f9a945b24f1c9ad8c9ceea",
				"dweb:/ipfs/QmTbjtZSJDUhQnPVSigpii2GsbxqdPD1iWQ9f6vhbtqFN9"
			]
		},
		"contracts/interfaces/IMargari.sol": {
			"keccak256": "0x37011a68224d2b2924fc6f01caea0434a987e833d2febc873ec6673d20f9b4a4",
			"license": "APACHE 2.0",
			"urls": [
				"bzz-raw://699b7eaa0c598f337ed78c002befd6e691214e344d3bd6c5dc4ea88f1090acc2",
				"dweb:/ipfs/QmV5bF9edxQSDzQVmyHNK1umNEdoZTmxRy34xfpknHzapw"
			]
		},
		"contracts/interfaces/IMargariAlloStrategy.sol": {
			"keccak256": "0x373abb06e0064efcc0032121785da1f906bc1ae7cd7e843f142853ed77131731",
			"license": "APACHE 2.0",
			"urls": [
				"bzz-raw://3fca385e1ed1c9f19fa5bc6952ba913efda89166ec2706fb02779d3dadc7a53b",
				"dweb:/ipfs/QmbvWCie23ME3Ke2jkrsunvZZDUs1s7DRdnt4EhvQ2N96m"
			]
		},
		"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol": {
			"keccak256": "0xe1ccd35e03787b4a5beb138c336f5fc617f4885726bfdf3c82a642499e21f785",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://7369418f7c7a3a16c38ed506ceb4e873f0806e6d68db2f682fa46b0e6070a74a",
				"dweb:/ipfs/Qmc4MiHqKdPdd7H7me8h5LsjHMt7KgAdUg5phGUTHMVsdc"
			]
		},
		"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol": {
			"keccak256": "0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f",
			"license": "MIT",
			"urls": [
				"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e",
				"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA"
			]
		},
		"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol": {
			"keccak256": "0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487",
				"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH"
			]
		},
		"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol": {
			"keccak256": "0x96444e1b6b4adf69d76debd36a792d618e50a7902248ed84b6f07ccdab946893",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://eee957068fb48e486d8186d61e8a002a85a0e0004763c88ba03552afb47f3bf5",
				"dweb:/ipfs/QmWawMnwBMj8tyUoL6RMJtXbeSZUqLUN7iFieQqgUnFYro"
			]
		}
	},
	"version": 1
}