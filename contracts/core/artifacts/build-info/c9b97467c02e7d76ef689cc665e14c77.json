{
	"id": "c9b97467c02e7d76ef689cc665e14c77",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.23",
	"solcLongVersion": "0.8.23+commit.f704f362",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/core/MBaseStrategy.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.23;\r\n\r\n// Interfaces\r\nimport \"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol\";\r\n\r\n\r\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\r\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\r\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\r\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\r\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\r\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\r\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\r\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\r\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\r\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\r\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\r\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\r\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\r\n//                    allo.gitcoin.co\r\n\r\n/// @title BaseStrategy Contract\r\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\r\n/// @notice This contract is the base contract for all strategies\r\n/// @dev This contract is implemented by all strategies.\r\nabstract contract MBaseStrategy is IStrategy {\r\n    /// ==========================\r\n    /// === Storage Variables ====\r\n    /// ==========================\r\n    address constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    IAllo internal immutable allo;\r\n    bytes32 internal immutable strategyId;\r\n    bool internal poolActive;\r\n    uint256 internal poolId;\r\n    uint256 internal poolAmount;\r\n\r\n    /// ====================================\r\n    /// ========== Constructor =============\r\n    /// ====================================\r\n\r\n    /// @notice Constructor to set the Allo contract and \"strategyId'.\r\n    /// @param _allo Address of the Allo contract.\r\n    /// @param _name Name of the strategy\r\n    constructor(address _allo, string memory _name) {\r\n        allo = IAllo(_allo);\r\n        strategyId = keccak256(abi.encode(_name));\r\n    }\r\n\r\n    /// ====================================\r\n    /// =========== Modifiers ==============\r\n    /// ====================================\r\n\r\n    /// @notice Modifier to check if the 'msg.sender' is the Allo contract.\r\n    /// @dev Reverts if the 'msg.sender' is not the Allo contract.\r\n    modifier onlyAllo() {\r\n        _checkOnlyAllo();\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the '_sender' is a pool manager.\r\n    /// @dev Reverts if the '_sender' is not a pool manager.\r\n    /// @param _sender The address to check if they are a pool manager\r\n    modifier onlyPoolManager(address _sender) {\r\n        _checkOnlyPoolManager(_sender);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the pool is active.\r\n    /// @dev Reverts if the pool is not active.\r\n    modifier onlyActivePool() {\r\n        _checkOnlyActivePool();\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the pool is inactive.\r\n    /// @dev Reverts if the pool is active.\r\n    modifier onlyInactivePool() {\r\n        _checkInactivePool();\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the pool is initialized.\r\n    /// @dev Reverts if the pool is not initialized.\r\n    modifier onlyInitialized() {\r\n        _checkOnlyInitialized();\r\n        _;\r\n    }\r\n\r\n    /// ================================\r\n    /// =========== Views ==============\r\n    /// ================================\r\n\r\n    /// @notice Getter for the 'Allo' contract.\r\n    /// @return The Allo contract\r\n    function getAllo() external view override returns (IAllo) {\r\n        return allo;\r\n    }\r\n\r\n    /// @notice Getter for the 'poolId'.\r\n    /// @return The ID of the pool\r\n    function getPoolId() external view override returns (uint256) {\r\n        return poolId;\r\n    }\r\n\r\n    /// @notice Getter for the 'strategyId'.\r\n    /// @return The ID of the strategy\r\n    function getStrategyId() external view override returns (bytes32) {\r\n        return strategyId;\r\n    }\r\n\r\n    /// @notice Getter for the 'poolAmount'.\r\n    /// @return The balance of the pool\r\n    function getPoolAmount() external view virtual override returns (uint256) {\r\n        return poolAmount;\r\n    }\r\n\r\n    /// @notice Getter for whether or not the pool is active.\r\n    /// @return 'true' if the pool is active, otherwise 'false'\r\n    function isPoolActive() external view override returns (bool) {\r\n        return _isPoolActive();\r\n    }\r\n\r\n    /// @notice Getter for the status of a recipient.\r\n    /// @param _recipientId The ID of the recipient\r\n    /// @return The status of the recipient\r\n    function getRecipientStatus(address _recipientId) external view virtual returns (Status) {\r\n        return _getRecipientStatus(_recipientId);\r\n    }\r\n\r\n    /// ====================================\r\n    /// =========== Functions ==============\r\n    /// ====================================\r\n\r\n    /// @notice Initializes the 'Basetrategy'.\r\n    /// @dev Will revert if the poolId is invalid or already initialized\r\n    /// @param _poolId ID of the pool\r\n    function __BaseStrategy_init(uint256 _poolId) internal virtual onlyAllo {\r\n        // check if pool ID is not initialized already, if it is, revert\r\n        if (poolId != 0) revert(\"ALREADY INITIALIZED\"); \r\n\r\n        // check if pool ID is valid and not zero (0), if it is, revert\r\n        if (_poolId == 0) revert(\"INVALID\");\r\n        poolId = _poolId;\r\n    }\r\n\r\n    /// @notice Increases the pool amount.\r\n    /// @dev Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\r\n    /// @param _amount The amount to increase the pool by\r\n    function increasePoolAmount(uint256 _amount) external override onlyAllo {\r\n        _beforeIncreasePoolAmount(_amount);\r\n        poolAmount += _amount;\r\n        _afterIncreasePoolAmount(_amount);\r\n    }\r\n\r\n    /// @notice Registers a recipient.\r\n    /// @dev Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the\r\n    ///      strategy implementation. Only 'Allo' contract can call this when it is initialized.\r\n    /// @param _data The data to use to register the recipient\r\n    /// @param _sender The address of the sender\r\n    /// @return recipientId The recipientId\r\n    function registerRecipient(bytes memory _data, address _sender)\r\n        external\r\n        payable\r\n        onlyAllo\r\n        onlyInitialized\r\n        returns (address recipientId)\r\n    {\r\n        _beforeRegisterRecipient(_data, _sender);\r\n        recipientId = _registerRecipient(_data, _sender);\r\n        _afterRegisterRecipient(_data, _sender);\r\n    }\r\n\r\n    /// @notice Allocates to a recipient.\r\n    /// @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\r\n    ///      call this when it is initialized.\r\n    /// @param _data The data to use to allocate to the recipient\r\n    /// @param _sender The address of the sender\r\n    function allocate(bytes memory _data, address _sender) external payable onlyAllo onlyInitialized {\r\n        _beforeAllocate(_data, _sender);\r\n        _allocate(_data, _sender);\r\n        _afterAllocate(_data, _sender);\r\n    }\r\n\r\n    /// @notice Distributes funds (tokens) to recipients.\r\n    /// @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\r\n    ///      call this when it is initialized.\r\n    /// @param _recipientIds The IDs of the recipients\r\n    /// @param _data The data to use to distribute to the recipients\r\n    /// @param _sender The address of the sender\r\n    function distribute(address[] memory _recipientIds, bytes memory _data, address _sender)\r\n        external\r\n        onlyAllo\r\n        onlyInitialized\r\n    {\r\n        _beforeDistribute(_recipientIds, _data, _sender);\r\n        _distribute(_recipientIds, _data, _sender);\r\n        _afterDistribute(_recipientIds, _data, _sender);\r\n    }\r\n\r\n    /// @notice Gets the payout summary for recipients.\r\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\r\n    /// @param _recipientIds The IDs of the recipients\r\n    /// @param _data The data to use to get the payout summary for the recipients\r\n    /// @return The payout summary for the recipients\r\n    function getPayouts(address[] memory _recipientIds, bytes[] memory _data)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (PayoutSummary[] memory)\r\n    {\r\n        uint256 recipientLength = _recipientIds.length;\r\n        // check if the length of the recipient IDs and data arrays are equal, if they are not, revert\r\n        if (recipientLength != _data.length) revert(\"ARRAY MISMATCH\");\r\n\r\n        PayoutSummary[] memory payouts = new PayoutSummary[](recipientLength);\r\n        for (uint256 i; i < recipientLength;) {\r\n            payouts[i] = _getPayout(_recipientIds[i], _data[i]);\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        return payouts;\r\n    }\r\n\r\n    /// @notice Checks if the '_allocator' is a valid allocator.\r\n    /// @dev How the allocator is determined is up to the strategy implementation.\r\n    /// @param _allocator The address to check if it is a valid allocator for the strategy.\r\n    /// @return 'true' if the address is a valid allocator, 'false' otherwise\r\n    function isValidAllocator(address _allocator) external view virtual override returns (bool) {\r\n        return _isValidAllocator(_allocator);\r\n    }\r\n\r\n    /// ====================================\r\n    /// ============ Internal ==============\r\n    /// ====================================\r\n\r\n    /// @notice Checks if the 'msg.sender' is the Allo contract.\r\n    /// @dev Reverts if the 'msg.sender' is not the Allo contract.\r\n    function _checkOnlyAllo() internal view {\r\n        if (msg.sender != address(allo)) revert(\"UNAUTHORIZED\");\r\n    }\r\n\r\n    /// @notice Checks if the '_sender' is a pool manager.\r\n    /// @dev Reverts if the '_sender' is not a pool manager.\r\n    /// @param _sender The address to check if they are a pool manager\r\n    function _checkOnlyPoolManager(address _sender) internal view {\r\n        if (!allo.isPoolManager(poolId, _sender)) revert(\"UNAUTHORIZED\");\r\n    }\r\n\r\n    /// @notice Checks if the pool is active.\r\n    /// @dev Reverts if the pool is not active.\r\n    function _checkOnlyActivePool() internal view {\r\n        if (!poolActive) revert(\"POOL INACTIVE\");\r\n    }\r\n\r\n    /// @notice Checks if the pool is inactive.\r\n    /// @dev Reverts if the pool is active.\r\n    function _checkInactivePool() internal view {\r\n        if (poolActive) revert(\"POOL INACTIVE\");\r\n    }\r\n\r\n    /// @notice Checks if the pool is initialized.\r\n    /// @dev Reverts if the pool is not initialized.\r\n    function _checkOnlyInitialized() internal view {\r\n        if (poolId == 0) revert(\"NOT_INITIALIZED\"); \r\n    }\r\n\r\n    /// @notice Set the pool to active or inactive status.\r\n    /// @dev This will emit a 'PoolActive()' event. Used by the strategy implementation.\r\n    /// @param _active The status to set, 'true' means active, 'false' means inactive\r\n    function _setPoolActive(bool _active) internal {\r\n        poolActive = _active;\r\n        emit PoolActive(_active);\r\n    }\r\n\r\n    /// @notice Checks if the pool is active.\r\n    /// @dev Used by the strategy implementation.\r\n    /// @return 'true' if the pool is active, otherwise 'false'\r\n    function _isPoolActive() internal view virtual returns (bool) {\r\n        return poolActive;\r\n    }\r\n\r\n    /// @notice Checks if the allocator is valid\r\n    /// @param _allocator The allocator address\r\n    /// @return 'true' if the allocator is valid, otherwise 'false'\r\n    function _isValidAllocator(address _allocator) internal view virtual returns (bool);\r\n\r\n    /// @notice This will register a recipient, set their status (and any other strategy specific values), and\r\n    ///         return the ID of the recipient.\r\n    /// @dev Able to change status all the way up to Accepted, or to Pending and if there are more steps, additional\r\n    ///      functions should be added to allow the owner to check this. The owner could also check attestations directly\r\n    ///      and then Accept for instance.\r\n    /// @param _data The data to use to register the recipient\r\n    /// @param _sender The address of the sender\r\n    /// @return The ID of the recipient\r\n    function _registerRecipient(bytes memory _data, address _sender) internal virtual returns (address);\r\n\r\n    /// @notice This will allocate to a recipient.\r\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\r\n    /// @param _data The data to use to allocate to the recipient\r\n    /// @param _sender The address of the sender\r\n    function _allocate(bytes memory _data, address _sender) internal virtual;\r\n\r\n    /// @notice This will distribute funds (tokens) to recipients.\r\n    /// @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\r\n    /// this contract will need to track the amount paid already, so that it doesn't double pay.\r\n    /// @param _recipientIds The ids of the recipients to distribute to\r\n    /// @param _data Data required will depend on the strategy implementation\r\n    /// @param _sender The address of the sender\r\n    function _distribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual;\r\n\r\n    /// @notice This will get the payout summary for a recipient.\r\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\r\n    /// @param _recipientId The ID of the recipient\r\n    /// @param _data The data to use to get the payout summary for the recipient\r\n    /// @return The payout summary for the recipient\r\n    function _getPayout(address _recipientId, bytes memory _data)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (PayoutSummary memory);\r\n\r\n    /// @notice This will get the status of a recipient.\r\n    /// @param _recipientId The ID of the recipient\r\n    /// @return The status of the recipient\r\n    function _getRecipientStatus(address _recipientId) internal view virtual returns (Status);\r\n\r\n    /// ===================================\r\n    /// ============== Hooks ==============\r\n    /// ===================================\r\n\r\n    /// @notice Hook called before increasing the pool amount.\r\n    /// @param _amount The amount to increase the pool by\r\n    function _beforeIncreasePoolAmount(uint256 _amount) internal virtual {}\r\n\r\n    /// @notice Hook called after increasing the pool amount.\r\n    /// @param _amount The amount to increase the pool by\r\n    function _afterIncreasePoolAmount(uint256 _amount) internal virtual {}\r\n\r\n    /// @notice Hook called before registering a recipient.\r\n    /// @param _data The data to use to register the recipient\r\n    /// @param _sender The address of the sender\r\n    function _beforeRegisterRecipient(bytes memory _data, address _sender) internal virtual {}\r\n\r\n    /// @notice Hook called after registering a recipient.\r\n    /// @param _data The data to use to register the recipient\r\n    /// @param _sender The address of the sender\r\n    function _afterRegisterRecipient(bytes memory _data, address _sender) internal virtual {}\r\n\r\n    /// @notice Hook called before allocating to a recipient.\r\n    /// @param _data The data to use to allocate to the recipient\r\n    /// @param _sender The address of the sender\r\n    function _beforeAllocate(bytes memory _data, address _sender) internal virtual {}\r\n\r\n    /// @notice Hook called after allocating to a recipient.\r\n    /// @param _data The data to use to allocate to the recipient\r\n    /// @param _sender The address of the sender\r\n    function _afterAllocate(bytes memory _data, address _sender) internal virtual {}\r\n\r\n    /// @notice Hook called before distributing funds (tokens) to recipients.\r\n    /// @param _recipientIds The IDs of the recipients\r\n    /// @param _data The data to use to distribute to the recipients\r\n    /// @param _sender The address of the sender\r\n    function _beforeDistribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual {}\r\n\r\n    /// @notice Hook called after distributing funds (tokens) to recipients.\r\n    /// @param _recipientIds The IDs of the recipients\r\n    /// @param _data The data to use to distribute to the recipients\r\n    /// @param _sender The address of the sender\r\n    function _afterDistribute(address[] memory _recipientIds, bytes memory _data, address _sender) internal virtual {}\r\n}"
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.19;\n\n// Interfaces\nimport {IAllo} from \"./IAllo.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title IStrategy Interface\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice BaseStrategy is the base contract that all strategies should inherit from and uses this interface.\n\ninterface IStrategy {\n    /// ======================\n    /// ======= Storage ======\n    /// ======================\n\n    /// @notice The Status enum that all recipients are based from\n    enum Status {\n        None,\n        Pending,\n        Accepted,\n        Rejected,\n        Appealed,\n        InReview,\n        Canceled\n    }\n\n    /// @notice Payout summary struct to hold the payout data\n    struct PayoutSummary {\n        address recipientAddress;\n        uint256 amount;\n    }\n\n    /// ======================\n    /// ======= Events =======\n    /// ======================\n\n    /// @notice Emitted when strategy is initialized.\n    /// @param poolId The ID of the pool\n    /// @param data The data passed to the 'initialize' function\n    event Initialized(uint256 poolId, bytes data);\n\n    /// @notice Emitted when a recipient is registered.\n    /// @param recipientId The ID of the recipient\n    /// @param data The data passed to the 'registerRecipient' function\n    /// @param sender The sender\n    event Registered(address indexed recipientId, bytes data, address sender);\n\n    /// @notice Emitted when a recipient is allocated to.\n    /// @param recipientId The ID of the recipient\n    /// @param amount The amount allocated\n    /// @param token The token allocated\n    event Allocated(address indexed recipientId, uint256 amount, address token, address sender);\n\n    /// @notice Emitted when tokens are distributed.\n    /// @param recipientId The ID of the recipient\n    /// @param recipientAddress The recipient\n    /// @param amount The amount distributed\n    /// @param sender The sender\n    event Distributed(address indexed recipientId, address recipientAddress, uint256 amount, address sender);\n\n    /// @notice Emitted when pool is set to active status.\n    /// @param active The status of the pool\n    event PoolActive(bool active);\n\n    /// ======================\n    /// ======= Views ========\n    /// ======================\n\n    /// @notice Getter for the address of the Allo contract.\n    /// @return The 'Allo' contract\n    function getAllo() external view returns (IAllo);\n\n    /// @notice Getter for the 'poolId' for this strategy.\n    /// @return The ID of the pool\n    function getPoolId() external view returns (uint256);\n\n    /// @notice Getter for the 'id' of the strategy.\n    /// @return The ID of the strategy\n    function getStrategyId() external view returns (bytes32);\n\n    /// @notice Checks whether a allocator is valid or not, will usually be true for all strategies\n    ///      and will depend on the strategy implementation.\n    /// @param _allocator The allocator to check\n    /// @return Whether the allocator is valid or not\n    function isValidAllocator(address _allocator) external view returns (bool);\n\n    /// @notice whether pool is active.\n    /// @return Whether the pool is active or not\n    function isPoolActive() external returns (bool);\n\n    /// @notice Checks the amount of tokens in the pool.\n    /// @return The balance of the pool\n    function getPoolAmount() external view returns (uint256);\n\n    /// @notice Increases the balance of the pool.\n    /// @param _amount The amount to increase the pool by\n    function increasePoolAmount(uint256 _amount) external;\n\n    /// @notice Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation\n    ///      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those\n    ///      since there is no need for Pending or Rejected.\n    /// @param _recipientId The ID of the recipient\n    /// @return The status of the recipient\n    function getRecipientStatus(address _recipientId) external view returns (Status);\n\n    /// @notice Checks the amount allocated to a recipient for distribution.\n    /// @dev Input the values you would send to distribute(), get the amounts each recipient in the array would receive.\n    ///      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\n    /// @param _recipientIds The IDs of the recipients\n    /// @param _data The encoded data\n    function getPayouts(address[] memory _recipientIds, bytes[] memory _data)\n        external\n        view\n        returns (PayoutSummary[] memory);\n\n    /// ======================\n    /// ===== Functions ======\n    /// ======================\n\n    /// @notice\n    /// @dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,\n    ///      use it, and then call super.initialize().\n    /// @param _poolId The ID of the pool\n    /// @param _data The encoded data\n    function initialize(uint256 _poolId, bytes memory _data) external;\n\n    /// @notice This will register a recipient, set their status (and any other strategy specific values), and\n    ///         return the ID of the recipient.\n    /// @dev Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional\n    ///      functions should be added to allow the owner to check this. The owner could also check attestations directly\n    ///      and then accept for instance. The '_data' will be determined by the strategy implementation.\n    /// @param _data The data to use to register the recipient\n    /// @param _sender The address of the sender\n    /// @return The ID of the recipient\n    function registerRecipient(bytes memory _data, address _sender) external payable returns (address);\n\n    /// @notice This will allocate to a recipient.\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\n    /// @param _data The data to use to allocate to the recipient\n    /// @param _sender The address of the sender\n    function allocate(bytes memory _data, address _sender) external payable;\n\n    /// @notice This will distribute funds (tokens) to recipients.\n    /// @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\n    /// this contract will need to track the amount paid already, so that it doesn't double pay.\n    function distribute(address[] memory _recipientIds, bytes memory _data, address _sender) external;\n}\n"
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.19;\n\n// Interfaces\nimport {IRegistry} from \"./IRegistry.sol\";\nimport {IStrategy} from \"./IStrategy.sol\";\n// Internal Libraries\nimport {Metadata} from \"../libraries/Metadata.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title Allo Interface\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice Interface for the Allo contract. It exposes all functions needed to use the Allo protocol.\ninterface IAllo {\n    /// ======================\n    /// ======= Structs ======\n    /// ======================\n\n    /// @notice the Pool struct that all strategy pools are based from\n    struct Pool {\n        bytes32 profileId;\n        IStrategy strategy;\n        address token;\n        Metadata metadata;\n        bytes32 managerRole;\n        bytes32 adminRole;\n    }\n\n    /// ======================\n    /// ======= Events =======\n    /// ======================\n\n    /// @notice Event emitted when a new pool is created\n    /// @param poolId ID of the pool created\n    /// @param profileId ID of the profile the pool is associated with\n    /// @param strategy Address of the strategy contract\n    /// @param token Address of the token pool was funded with when created\n    /// @param amount Amount pool was funded with when created\n    /// @param metadata Pool metadata\n    event PoolCreated(\n        uint256 indexed poolId,\n        bytes32 indexed profileId,\n        IStrategy strategy,\n        address token,\n        uint256 amount,\n        Metadata metadata\n    );\n\n    /// @notice Emitted when a pools metadata is updated\n    /// @param poolId ID of the pool updated\n    /// @param metadata Pool metadata that was updated\n    event PoolMetadataUpdated(uint256 indexed poolId, Metadata metadata);\n\n    /// @notice Emitted when a pool is funded\n    /// @param poolId ID of the pool funded\n    /// @param amount Amount funded to the pool\n    /// @param fee Amount of the fee paid to the treasury\n    event PoolFunded(uint256 indexed poolId, uint256 amount, uint256 fee);\n\n    /// @notice Emitted when the base fee is paid\n    /// @param poolId ID of the pool the base fee was paid for\n    /// @param amount Amount of the base fee paid\n    event BaseFeePaid(uint256 indexed poolId, uint256 amount);\n\n    /// @notice Emitted when the treasury address is updated\n    /// @param treasury Address of the new treasury\n    event TreasuryUpdated(address treasury);\n\n    /// @notice Emitted when the percent fee is updated\n    /// @param percentFee New percentage for the fee\n    event PercentFeeUpdated(uint256 percentFee);\n\n    /// @notice Emitted when the base fee is updated\n    /// @param baseFee New base fee amount\n    event BaseFeeUpdated(uint256 baseFee);\n\n    /// @notice Emitted when the registry address is updated\n    /// @param registry Address of the new registry\n    event RegistryUpdated(address registry);\n\n    /// @notice Emitted when a strategy is approved and added to the cloneable strategies\n    /// @param strategy Address of the strategy approved\n    event StrategyApproved(address strategy);\n\n    /// @notice Emitted when a strategy is removed from the cloneable strategies\n    /// @param strategy Address of the strategy removed\n    event StrategyRemoved(address strategy);\n\n    /// ====================================\n    /// ==== External/Public Functions =====\n    /// ====================================\n\n    /// @notice Initialize the Allo contract\n    /// @param _owner Address of the owner\n    /// @param _registry Address of the registry contract\n    /// @param _treasury Address of the treasury\n    /// @param _percentFee Percentage for the fee\n    /// @param _baseFee Base fee amount\n    function initialize(\n        address _owner,\n        address _registry,\n        address payable _treasury,\n        uint256 _percentFee,\n        uint256 _baseFee\n    ) external;\n\n    /// @notice Updates a pools metadata.\n    /// @dev 'msg.sender' must be a pool admin.\n    /// @param _poolId The ID of the pool to update\n    /// @param _metadata The new metadata to set\n    function updatePoolMetadata(uint256 _poolId, Metadata memory _metadata) external;\n\n    /// @notice Update the registry address.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _registry The new registry address\n    function updateRegistry(address _registry) external;\n\n    /// @notice Updates the treasury address.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _treasury The new treasury address\n    function updateTreasury(address payable _treasury) external;\n\n    /// @notice Updates the percentage for the fee.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _percentFee The new percentage for the fee\n    function updatePercentFee(uint256 _percentFee) external;\n\n    /// @notice Updates the base fee.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _baseFee The new base fee\n    function updateBaseFee(uint256 _baseFee) external;\n\n    /// @notice Adds a strategy to the cloneable strategies.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _strategy The address of the strategy to add\n    function addToCloneableStrategies(address _strategy) external;\n\n    /// @notice Removes a strategy from the cloneable strategies.\n    /// @dev 'msg.sender' must be the Allo contract owner.\n    /// @param _strategy The address of the strategy to remove\n    function removeFromCloneableStrategies(address _strategy) external;\n\n    /// @notice Adds a pool manager to the pool.\n    /// @dev 'msg.sender' must be a pool admin.\n    /// @param _poolId The ID of the pool to add the manager to\n    /// @param _manager The address of the manager to add\n    function addPoolManager(uint256 _poolId, address _manager) external;\n\n    /// @notice Removes a pool manager from the pool.\n    /// @dev 'msg.sender' must be a pool admin.\n    /// @param _poolId The ID of the pool to remove the manager from\n    /// @param _manager The address of the manager to remove\n    function removePoolManager(uint256 _poolId, address _manager) external;\n\n    /// @notice Recovers funds from a pool.\n    /// @dev 'msg.sender' must be a pool admin.\n    /// @param _token The token to recover\n    /// @param _recipient The address to send the recovered funds to\n    function recoverFunds(address _token, address _recipient) external;\n\n    /// @notice Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy.\n    /// @param _poolId The ID of the pool to register the recipient for\n    function registerRecipient(uint256 _poolId, bytes memory _data) external payable returns (address);\n\n    /// @notice Registers a batch of recipients.\n    /// @param _poolIds The pool ID's to register the recipients for\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy\n    function batchRegisterRecipient(uint256[] memory _poolIds, bytes[] memory _data)\n        external\n        returns (address[] memory);\n\n    /// @notice Funds a pool.\n    /// @dev 'msg.value' must be greater than 0 if the token is the native token\n    ///       or '_amount' must be greater than 0 if the token is not the native token.\n    /// @param _poolId The ID of the pool to fund\n    /// @param _amount The amount to fund the pool with\n    function fundPool(uint256 _poolId, uint256 _amount) external payable;\n\n    /// @notice Allocates funds to a recipient.\n    /// @dev Each strategy will handle the allocation of funds differently.\n    /// @param _poolId The ID of the pool to allocate funds from\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy.\n    function allocate(uint256 _poolId, bytes memory _data) external payable;\n\n    /// @notice Allocates funds to multiple recipients.\n    /// @dev Each strategy will handle the allocation of funds differently\n    function batchAllocate(uint256[] calldata _poolIds, bytes[] memory _datas) external;\n\n    /// @notice Distributes funds to recipients and emits {Distributed} event if successful\n    /// @dev Each strategy will handle the distribution of funds differently\n    /// @param _poolId The ID of the pool to distribute from\n    /// @param _recipientIds The recipient ids to distribute to\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy\n    function distribute(uint256 _poolId, address[] memory _recipientIds, bytes memory _data) external;\n\n    /// =========================\n    /// ==== View Functions =====\n    /// =========================\n\n    /// @notice Checks if an address is a pool admin.\n    /// @param _poolId The ID of the pool to check\n    /// @param _address The address to check\n    /// @return 'true' if the '_address' is a pool admin, otherwise 'false'\n    function isPoolAdmin(uint256 _poolId, address _address) external view returns (bool);\n\n    /// @notice Checks if an address is a pool manager.\n    /// @param _poolId The ID of the pool to check\n    /// @param _address The address to check\n    /// @return 'true' if the '_address' is a pool manager, otherwise 'false'\n    function isPoolManager(uint256 _poolId, address _address) external view returns (bool);\n\n    /// @notice Checks if a strategy is cloneable (is in the cloneableStrategies mapping).\n    /// @param _strategy The address of the strategy to check\n    /// @return 'true' if the '_strategy' is cloneable, otherwise 'false'\n    function isCloneableStrategy(address _strategy) external view returns (bool);\n\n    /// @notice Returns the address of the strategy for a given 'poolId'\n    /// @param _poolId The ID of the pool to check\n    /// @return strategy The address of the strategy for the ID of the pool passed in\n    function getStrategy(uint256 _poolId) external view returns (address);\n\n    /// @notice Returns the current percent fee\n    /// @return percentFee The current percentage for the fee\n    function getPercentFee() external view returns (uint256);\n\n    /// @notice Returns the current base fee\n    /// @return baseFee The current base fee\n    function getBaseFee() external view returns (uint256);\n\n    /// @notice Returns the current treasury address\n    /// @return treasury The current treasury address\n    function getTreasury() external view returns (address payable);\n\n    /// @notice Returns the current registry address\n    /// @return registry The current registry address\n    function getRegistry() external view returns (IRegistry);\n\n    /// @notice Returns the 'Pool' struct for a given 'poolId'\n    /// @param _poolId The ID of the pool to check\n    /// @return pool The 'Pool' struct for the ID of the pool passed in\n    function getPool(uint256 _poolId) external view returns (Pool memory);\n\n    /// @notice Returns the current fee denominator\n    /// @dev 1e18 represents 100%\n    /// @return feeDenominator The current fee denominator\n    function getFeeDenominator() external view returns (uint256);\n\n    function createPoolWithCustomStrategy(\n        bytes32 _profileId,\n        address _strategy,\n        bytes memory _initStrategyData,\n        address _token,\n        uint256 _amount,\n        Metadata memory _metadata,\n        address[] memory _managers\n    ) external payable returns (uint256 poolId);\n}\n"
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.23;\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title Metadata\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice Metadata is used to define the metadata for the protocol that is used throughout the system.\nstruct Metadata {\n    /// @notice Protocol ID corresponding to a specific protocol (currently using IPFS = 1)\n    uint256 protocol;\n    /// @notice Pointer (hash) to fetch metadata for the specified protocol\n    string pointer;\n}\n"
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// Internal Libraries\nimport {Metadata} from \"../libraries/Metadata.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⢿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡟⠘⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣾⠻⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⡿⠀⠀⠸⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠀⠀⢀⣠⣴⣴⣶⣶⣶⣦⣦⣀⡀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⡿⠃⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠁⠀⠀⠀⢻⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠃⠀⠀⠀⠀⠈⢿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⣰⣿⣿⣿⡿⠋⠁⠀⠀⠈⠘⠹⣿⣿⣿⣿⣆⠀⠀⠀\n// ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡀⠀⠀\n// ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣟⠀⡀⢀⠀⡀⢀⠀⡀⢈⢿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇⠀⠀\n// ⠀⠀⣠⣿⣿⣿⣿⣿⣿⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣷⡀⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠸⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠂⠀⠀\n// ⠀⠀⠙⠛⠿⠻⠻⠛⠉⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣧⠀⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⢻⣿⣿⣿⣷⣀⢀⠀⠀⠀⡀⣰⣾⣿⣿⣿⠏⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣧⠀⠀⢸⣿⣿⣿⣗⠀⠀⠀⢸⣿⣿⣿⡯⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣾⣾⣷⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠃⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⠻⠟⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠟⠿⠟⠿⠆⠀⠸⠿⠿⠟⠯⠀⠀⠀⠸⠿⠿⠿⠏⠀⠀⠀⠀⠀⠈⠉⠻⠻⡿⣿⢿⡿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀\n//                    allo.gitcoin.co\n\n/// @title IRegistry Interface\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n/// @notice Interface for the Registry contract and exposes all functions needed to use the Registry\n///         within the Allo protocol.\n/// @dev The Registry Interface is used to interact with the Allo protocol and create profiles\n///      that can be used to interact with the Allo protocol. The Registry is the main contract\n///      that all other contracts interact with to get the 'Profile' information needed to\n///      interact with the Allo protocol. The Registry is also used to create new profiles\n///      and update existing profiles. The Registry is also used to add and remove members\n///      from a profile. The Registry will not always be used in a strategy and will depend on\n///      the strategy being used.\ninterface IRegistry {\n    /// ======================\n    /// ======= Structs ======\n    /// ======================\n\n    /// @dev The Profile struct that all profiles are based from\n    struct Profile {\n        bytes32 id;\n        uint256 nonce;\n        string name;\n        Metadata metadata;\n        address owner;\n        address anchor;\n    }\n\n    /// ======================\n    /// ======= Events =======\n    /// ======================\n\n    /// @dev Emitted when a profile is created. This will return your anchor address.\n    event ProfileCreated(\n        bytes32 indexed profileId, uint256 nonce, string name, Metadata metadata, address owner, address anchor\n    );\n\n    /// @dev Emitted when a profile name is updated. This will update the anchor when the name is updated and return it.\n    event ProfileNameUpdated(bytes32 indexed profileId, string name, address anchor);\n\n    /// @dev Emitted when a profile's metadata is updated.\n    event ProfileMetadataUpdated(bytes32 indexed profileId, Metadata metadata);\n\n    /// @dev Emitted when a profile owner is updated.\n    event ProfileOwnerUpdated(bytes32 indexed profileId, address owner);\n\n    /// @dev Emitted when a profile pending owner is updated.\n    event ProfilePendingOwnerUpdated(bytes32 indexed profileId, address pendingOwner);\n\n    /// =========================\n    /// ==== View Functions =====\n    /// =========================\n\n    /// @dev Returns the 'Profile' for a '_profileId' passed\n    /// @param _profileId The 'profileId' to return the 'Profile' for\n    /// @return profile The 'Profile' for the '_profileId' passed\n    function getProfileById(bytes32 _profileId) external view returns (Profile memory profile);\n\n    /// @dev Returns the 'Profile' for an '_anchor' passed\n    /// @param _anchor The 'anchor' to return the 'Profile' for\n    /// @return profile The 'Profile' for the '_anchor' passed\n    function getProfileByAnchor(address _anchor) external view returns (Profile memory profile);\n\n    /// @dev Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in\n    /// @param _profileId The 'profileId' to check if the '_account' is a member or owner of\n    /// @param _account The 'account' to check if they are a member or owner of the '_profileId' passed in\n    /// @return isOwnerOrMemberOfProfile A boolean if the '_account' is a member or owner of the '_profileId' passed in\n    function isOwnerOrMemberOfProfile(bytes32 _profileId, address _account)\n        external\n        view\n        returns (bool isOwnerOrMemberOfProfile);\n\n    /// @dev Returns a boolean if the '_account' is an owner of the '_profileId' passed in\n    /// @param _profileId The 'profileId' to check if the '_account' is an owner of\n    /// @param _owner The 'owner' to check if they are an owner of the '_profileId' passed in\n    /// @return isOwnerOfProfile A boolean if the '_account' is an owner of the '_profileId' passed in\n    function isOwnerOfProfile(bytes32 _profileId, address _owner) external view returns (bool isOwnerOfProfile);\n\n    /// @dev Returns a boolean if the '_account' is a member of the '_profileId' passed in\n    /// @param _profileId The 'profileId' to check if the '_account' is a member of\n    /// @param _member The 'member' to check if they are a member of the '_profileId' passed in\n    /// @return isMemberOfProfile A boolean if the '_account' is a member of the '_profileId' passed in\n    function isMemberOfProfile(bytes32 _profileId, address _member) external view returns (bool isMemberOfProfile);\n\n    /// ====================================\n    /// ==== External/Public Functions =====\n    /// ====================================\n\n    /// @dev Creates a new 'Profile' and returns the 'profileId' of the new profile\n    ///\n    /// Note: The 'name' and 'nonce' are used to generate the 'anchor' address\n    ///\n    /// Requirements: None, anyone can create a new profile\n    ///\n    /// @param _nonce The nonce to use to generate the 'anchor' address\n    /// @param _name The name to use to generate the 'anchor' address\n    /// @param _metadata The 'Metadata' to use to generate the 'anchor' address\n    /// @param _owner The 'owner' to use to generate the 'anchor' address\n    /// @param _members The 'members' to use to generate the 'anchor' address\n    /// @return profileId The 'profileId' of the new profile\n    function createProfile(\n        uint256 _nonce,\n        string memory _name,\n        Metadata memory _metadata,\n        address _owner,\n        address[] memory _members\n    ) external returns (bytes32 profileId);\n\n    /// @dev Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address\n    ///\n    /// Requirements: Only the 'Profile' owner can update the name\n    ///\n    /// Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'\n    ///       so please use caution. You can always recreate your 'anchor' address by updating the name back\n    ///       to the original name used to create the profile.\n    ///\n    /// @param _profileId The 'profileId' to update the name for\n    /// @param _name The new 'name' value\n    /// @return anchor The new 'anchor' address\n    function updateProfileName(bytes32 _profileId, string memory _name) external returns (address anchor);\n\n    /// @dev Updates the 'Metadata' of the '_profileId' passed in\n    ///\n    /// Requirements: Only the 'Profile' owner can update the metadata\n    ///\n    /// @param _profileId The 'profileId' to update the metadata for\n    /// @param _metadata The new 'Metadata' value\n    function updateProfileMetadata(bytes32 _profileId, Metadata memory _metadata) external;\n\n    /// @dev Updates the pending 'owner' of the '_profileId' passed in\n    ///\n    /// Requirements: Only the 'Profile' owner can update the pending owner\n    ///\n    /// @param _profileId The 'profileId' to update the pending owner for\n    /// @param _pendingOwner The new pending 'owner' value\n    function updateProfilePendingOwner(bytes32 _profileId, address _pendingOwner) external;\n\n    /// @dev Accepts the pending 'owner' of the '_profileId' passed in\n    ///\n    /// Requirements: Only the pending owner can accept the ownership\n    ///\n    /// @param _profileId The 'profileId' to accept the ownership for\n    function acceptProfileOwnership(bytes32 _profileId) external;\n\n    /// @dev Adds members to the '_profileId' passed in\n    ///\n    /// Requirements: Only the 'Profile' owner can add members\n    ///\n    /// @param _profileId The 'profileId' to add members to\n    /// @param _members The members to add to the '_profileId' passed in\n    function addMembers(bytes32 _profileId, address[] memory _members) external;\n\n    /// @dev Removes members from the '_profileId' passed in\n    ///\n    /// Requirements: Only the 'Profile' owner can remove members\n    ///\n    /// @param _profileId The 'profileId' to remove members from\n    /// @param _members The members to remove from the '_profileId' passed in\n    function removeMembers(bytes32 _profileId, address[] memory _members) external;\n\n    /// @dev Recovers funds from the contract\n    ///\n    /// Requirements: Must be the Allo owner\n    ///\n    /// @param _token The token you want to use to recover funds\n    /// @param _recipient The recipient of the recovered funds\n    function recoverFunds(address _token, address _recipient) external;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "paris"
		}
	},
	"output": {
		"contracts": {
			"contracts/core/MBaseStrategy.sol": {
				"MBaseStrategy": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Allocated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Distributed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"name": "PoolActive",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Registered",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllo",
							"outputs": [
								{
									"internalType": "contract IAllo",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_data",
									"type": "bytes[]"
								}
							],
							"name": "getPayouts",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "recipientAddress",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										}
									],
									"internalType": "struct IStrategy.PayoutSummary[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_recipientId",
									"type": "address"
								}
							],
							"name": "getRecipientStatus",
							"outputs": [
								{
									"internalType": "enum IStrategy.Status",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getStrategyId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "increasePoolAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isPoolActive",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_allocator",
									"type": "address"
								}
							],
							"name": "isValidAllocator",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "registerRecipient",
							"outputs": [
								{
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"details": "This contract is implemented by all strategies.",
						"events": {
							"Allocated(address,uint256,address,address)": {
								"params": {
									"amount": "The amount allocated",
									"recipientId": "The ID of the recipient",
									"token": "The token allocated"
								}
							},
							"Distributed(address,address,uint256,address)": {
								"params": {
									"amount": "The amount distributed",
									"recipientAddress": "The recipient",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							},
							"Initialized(uint256,bytes)": {
								"params": {
									"data": "The data passed to the 'initialize' function",
									"poolId": "The ID of the pool"
								}
							},
							"PoolActive(bool)": {
								"params": {
									"active": "The status of the pool"
								}
							},
							"Registered(address,bytes,address)": {
								"params": {
									"data": "The data passed to the 'registerRecipient' function",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allocate(bytes,address)": {
								"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
								"params": {
									"_data": "The data to use to allocate to the recipient",
									"_sender": "The address of the sender"
								}
							},
							"constructor": {
								"params": {
									"_allo": "Address of the Allo contract.",
									"_name": "Name of the strategy"
								}
							},
							"distribute(address[],bytes,address)": {
								"details": "The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.",
								"params": {
									"_data": "The data to use to distribute to the recipients",
									"_recipientIds": "The IDs of the recipients",
									"_sender": "The address of the sender"
								}
							},
							"getAllo()": {
								"returns": {
									"_0": "The Allo contract"
								}
							},
							"getPayouts(address[],bytes[])": {
								"details": "The encoded '_data' will be determined by the strategy implementation.",
								"params": {
									"_data": "The data to use to get the payout summary for the recipients",
									"_recipientIds": "The IDs of the recipients"
								},
								"returns": {
									"_0": "The payout summary for the recipients"
								}
							},
							"getPoolAmount()": {
								"returns": {
									"_0": "The balance of the pool"
								}
							},
							"getPoolId()": {
								"returns": {
									"_0": "The ID of the pool"
								}
							},
							"getRecipientStatus(address)": {
								"params": {
									"_recipientId": "The ID of the recipient"
								},
								"returns": {
									"_0": "The status of the recipient"
								}
							},
							"getStrategyId()": {
								"returns": {
									"_0": "The ID of the strategy"
								}
							},
							"increasePoolAmount(uint256)": {
								"details": "Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.",
								"params": {
									"_amount": "The amount to increase the pool by"
								}
							},
							"initialize(uint256,bytes)": {
								"params": {
									"_data": "The encoded data",
									"_poolId": "The ID of the pool"
								}
							},
							"isPoolActive()": {
								"returns": {
									"_0": "'true' if the pool is active, otherwise 'false'"
								}
							},
							"isValidAllocator(address)": {
								"details": "How the allocator is determined is up to the strategy implementation.",
								"params": {
									"_allocator": "The address to check if it is a valid allocator for the strategy."
								},
								"returns": {
									"_0": "'true' if the address is a valid allocator, 'false' otherwise"
								}
							},
							"registerRecipient(bytes,address)": {
								"details": "Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.",
								"params": {
									"_data": "The data to use to register the recipient",
									"_sender": "The address of the sender"
								},
								"returns": {
									"recipientId": "The recipientId"
								}
							}
						},
						"title": "BaseStrategy Contract",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allocate(bytes,address)": "ef2920fc",
							"distribute(address[],bytes,address)": "0a6f0ee9",
							"getAllo()": "15cc481e",
							"getPayouts(address[],bytes[])": "b2b878d0",
							"getPoolAmount()": "4ab4ba42",
							"getPoolId()": "38fff2d0",
							"getRecipientStatus(address)": "eb11af93",
							"getStrategyId()": "42fda9c7",
							"increasePoolAmount(uint256)": "f5b0dfb7",
							"initialize(uint256,bytes)": "edd146cc",
							"isPoolActive()": "df868ed3",
							"isValidAllocator(address)": "4d31d087",
							"registerRecipient(bytes,address)": "2bbe0cae"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"PoolActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllo\",\"outputs\":[{\"internalType\":\"contract IAllo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"getPayouts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.PayoutSummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientId\",\"type\":\"address\"}],\"name\":\"getRecipientStatus\",\"outputs\":[{\"internalType\":\"enum IStrategy.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increasePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"}],\"name\":\"isValidAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"details\":\"This contract is implemented by all strategies.\",\"events\":{\"Allocated(address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount allocated\",\"recipientId\":\"The ID of the recipient\",\"token\":\"The token allocated\"}},\"Distributed(address,address,uint256,address)\":{\"params\":{\"amount\":\"The amount distributed\",\"recipientAddress\":\"The recipient\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}},\"Initialized(uint256,bytes)\":{\"params\":{\"data\":\"The data passed to the 'initialize' function\",\"poolId\":\"The ID of the pool\"}},\"PoolActive(bool)\":{\"params\":{\"active\":\"The status of the pool\"}},\"Registered(address,bytes,address)\":{\"params\":{\"data\":\"The data passed to the 'registerRecipient' function\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}}},\"kind\":\"dev\",\"methods\":{\"allocate(bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to allocate to the recipient\",\"_sender\":\"The address of the sender\"}},\"constructor\":{\"params\":{\"_allo\":\"Address of the Allo contract.\",\"_name\":\"Name of the strategy\"}},\"distribute(address[],bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can      call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to distribute to the recipients\",\"_recipientIds\":\"The IDs of the recipients\",\"_sender\":\"The address of the sender\"}},\"getAllo()\":{\"returns\":{\"_0\":\"The Allo contract\"}},\"getPayouts(address[],bytes[])\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to get the payout summary for the recipients\",\"_recipientIds\":\"The IDs of the recipients\"},\"returns\":{\"_0\":\"The payout summary for the recipients\"}},\"getPoolAmount()\":{\"returns\":{\"_0\":\"The balance of the pool\"}},\"getPoolId()\":{\"returns\":{\"_0\":\"The ID of the pool\"}},\"getRecipientStatus(address)\":{\"params\":{\"_recipientId\":\"The ID of the recipient\"},\"returns\":{\"_0\":\"The status of the recipient\"}},\"getStrategyId()\":{\"returns\":{\"_0\":\"The ID of the strategy\"}},\"increasePoolAmount(uint256)\":{\"details\":\"Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\",\"params\":{\"_amount\":\"The amount to increase the pool by\"}},\"initialize(uint256,bytes)\":{\"params\":{\"_data\":\"The encoded data\",\"_poolId\":\"The ID of the pool\"}},\"isPoolActive()\":{\"returns\":{\"_0\":\"'true' if the pool is active, otherwise 'false'\"}},\"isValidAllocator(address)\":{\"details\":\"How the allocator is determined is up to the strategy implementation.\",\"params\":{\"_allocator\":\"The address to check if it is a valid allocator for the strategy.\"},\"returns\":{\"_0\":\"'true' if the address is a valid allocator, 'false' otherwise\"}},\"registerRecipient(bytes,address)\":{\"details\":\"Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the      strategy implementation. Only 'Allo' contract can call this when it is initialized.\",\"params\":{\"_data\":\"The data to use to register the recipient\",\"_sender\":\"The address of the sender\"},\"returns\":{\"recipientId\":\"The recipientId\"}}},\"title\":\"BaseStrategy Contract\",\"version\":1},\"userdoc\":{\"events\":{\"Allocated(address,uint256,address,address)\":{\"notice\":\"Emitted when a recipient is allocated to.\"},\"Distributed(address,address,uint256,address)\":{\"notice\":\"Emitted when tokens are distributed.\"},\"Initialized(uint256,bytes)\":{\"notice\":\"Emitted when strategy is initialized.\"},\"PoolActive(bool)\":{\"notice\":\"Emitted when pool is set to active status.\"},\"Registered(address,bytes,address)\":{\"notice\":\"Emitted when a recipient is registered.\"}},\"kind\":\"user\",\"methods\":{\"allocate(bytes,address)\":{\"notice\":\"Allocates to a recipient.\"},\"constructor\":{\"notice\":\"Constructor to set the Allo contract and \\\"strategyId'.\"},\"distribute(address[],bytes,address)\":{\"notice\":\"Distributes funds (tokens) to recipients.\"},\"getAllo()\":{\"notice\":\"Getter for the 'Allo' contract.\"},\"getPayouts(address[],bytes[])\":{\"notice\":\"Gets the payout summary for recipients.\"},\"getPoolAmount()\":{\"notice\":\"Getter for the 'poolAmount'.\"},\"getPoolId()\":{\"notice\":\"Getter for the 'poolId'.\"},\"getRecipientStatus(address)\":{\"notice\":\"Getter for the status of a recipient.\"},\"getStrategyId()\":{\"notice\":\"Getter for the 'strategyId'.\"},\"increasePoolAmount(uint256)\":{\"notice\":\"Increases the pool amount.\"},\"initialize(uint256,bytes)\":{\"notice\":\"@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize().\"},\"isPoolActive()\":{\"notice\":\"Getter for whether or not the pool is active.\"},\"isValidAllocator(address)\":{\"notice\":\"Checks if the '_allocator' is a valid allocator.\"},\"registerRecipient(bytes,address)\":{\"notice\":\"Registers a recipient.\"}},\"notice\":\"This contract is the base contract for all strategies\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/MBaseStrategy.sol\":\"MBaseStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/MBaseStrategy.sol\":{\"keccak256\":\"0xbb4e1ed7dfd300d85f94aab8b0cfb36c33eaaf7bb08e19611a2f3afccfd8d6d8\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://35b49b9e40206776d2f1912709f7637e0e4d37e3a7fd16b52642fe6a867b5286\",\"dweb:/ipfs/QmaP39Rcm4Kv6SUvTs2Gu4ZWuvJ1wxT3jUSRuLuiNcvd8D\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol\":{\"keccak256\":\"0xe1ccd35e03787b4a5beb138c336f5fc617f4885726bfdf3c82a642499e21f785\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7369418f7c7a3a16c38ed506ceb4e873f0806e6d68db2f682fa46b0e6070a74a\",\"dweb:/ipfs/Qmc4MiHqKdPdd7H7me8h5LsjHMt7KgAdUg5phGUTHMVsdc\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487\",\"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x96444e1b6b4adf69d76debd36a792d618e50a7902248ed84b6f07ccdab946893\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://eee957068fb48e486d8186d61e8a002a85a0e0004763c88ba03552afb47f3bf5\",\"dweb:/ipfs/QmWawMnwBMj8tyUoL6RMJtXbeSZUqLUN7iFieQqgUnFYro\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 16,
								"contract": "contracts/core/MBaseStrategy.sol:MBaseStrategy",
								"label": "poolActive",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 18,
								"contract": "contracts/core/MBaseStrategy.sol:MBaseStrategy",
								"label": "poolId",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 20,
								"contract": "contracts/core/MBaseStrategy.sol:MBaseStrategy",
								"label": "poolAmount",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"Allocated(address,uint256,address,address)": {
								"notice": "Emitted when a recipient is allocated to."
							},
							"Distributed(address,address,uint256,address)": {
								"notice": "Emitted when tokens are distributed."
							},
							"Initialized(uint256,bytes)": {
								"notice": "Emitted when strategy is initialized."
							},
							"PoolActive(bool)": {
								"notice": "Emitted when pool is set to active status."
							},
							"Registered(address,bytes,address)": {
								"notice": "Emitted when a recipient is registered."
							}
						},
						"kind": "user",
						"methods": {
							"allocate(bytes,address)": {
								"notice": "Allocates to a recipient."
							},
							"constructor": {
								"notice": "Constructor to set the Allo contract and \"strategyId'."
							},
							"distribute(address[],bytes,address)": {
								"notice": "Distributes funds (tokens) to recipients."
							},
							"getAllo()": {
								"notice": "Getter for the 'Allo' contract."
							},
							"getPayouts(address[],bytes[])": {
								"notice": "Gets the payout summary for recipients."
							},
							"getPoolAmount()": {
								"notice": "Getter for the 'poolAmount'."
							},
							"getPoolId()": {
								"notice": "Getter for the 'poolId'."
							},
							"getRecipientStatus(address)": {
								"notice": "Getter for the status of a recipient."
							},
							"getStrategyId()": {
								"notice": "Getter for the 'strategyId'."
							},
							"increasePoolAmount(uint256)": {
								"notice": "Increases the pool amount."
							},
							"initialize(uint256,bytes)": {
								"notice": "@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize()."
							},
							"isPoolActive()": {
								"notice": "Getter for whether or not the pool is active."
							},
							"isValidAllocator(address)": {
								"notice": "Checks if the '_allocator' is a valid allocator."
							},
							"registerRecipient(bytes,address)": {
								"notice": "Registers a recipient."
							}
						},
						"notice": "This contract is the base contract for all strategies",
						"version": 1
					}
				}
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol": {
				"IAllo": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "BaseFeePaid",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "baseFee",
									"type": "uint256"
								}
							],
							"name": "BaseFeeUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "percentFee",
									"type": "uint256"
								}
							],
							"name": "PercentFeeUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "contract IStrategy",
									"name": "strategy",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"indexed": false,
									"internalType": "struct Metadata",
									"name": "metadata",
									"type": "tuple"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "fee",
									"type": "uint256"
								}
							],
							"name": "PoolFunded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"indexed": false,
									"internalType": "struct Metadata",
									"name": "metadata",
									"type": "tuple"
								}
							],
							"name": "PoolMetadataUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "registry",
									"type": "address"
								}
							],
							"name": "RegistryUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "strategy",
									"type": "address"
								}
							],
							"name": "StrategyApproved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "strategy",
									"type": "address"
								}
							],
							"name": "StrategyRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "treasury",
									"type": "address"
								}
							],
							"name": "TreasuryUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_manager",
									"type": "address"
								}
							],
							"name": "addPoolManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_strategy",
									"type": "address"
								}
							],
							"name": "addToCloneableStrategies",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "_poolIds",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_datas",
									"type": "bytes[]"
								}
							],
							"name": "batchAllocate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "_poolIds",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_data",
									"type": "bytes[]"
								}
							],
							"name": "batchRegisterRecipient",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_strategy",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_initStrategyData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								},
								{
									"internalType": "address[]",
									"name": "_managers",
									"type": "address[]"
								}
							],
							"name": "createPoolWithCustomStrategy",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "fundPool",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getBaseFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getFeeDenominator",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPercentFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "profileId",
											"type": "bytes32"
										},
										{
											"internalType": "contract IStrategy",
											"name": "strategy",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "protocol",
													"type": "uint256"
												},
												{
													"internalType": "string",
													"name": "pointer",
													"type": "string"
												}
											],
											"internalType": "struct Metadata",
											"name": "metadata",
											"type": "tuple"
										},
										{
											"internalType": "bytes32",
											"name": "managerRole",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "adminRole",
											"type": "bytes32"
										}
									],
									"internalType": "struct IAllo.Pool",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getRegistry",
							"outputs": [
								{
									"internalType": "contract IRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								}
							],
							"name": "getStrategy",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTreasury",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_registry",
									"type": "address"
								},
								{
									"internalType": "address payable",
									"name": "_treasury",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_percentFee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_baseFee",
									"type": "uint256"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_strategy",
									"type": "address"
								}
							],
							"name": "isCloneableStrategy",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isPoolAdmin",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isPoolManager",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_recipient",
									"type": "address"
								}
							],
							"name": "recoverFunds",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "registerRecipient",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_strategy",
									"type": "address"
								}
							],
							"name": "removeFromCloneableStrategies",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_manager",
									"type": "address"
								}
							],
							"name": "removePoolManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_baseFee",
									"type": "uint256"
								}
							],
							"name": "updateBaseFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_percentFee",
									"type": "uint256"
								}
							],
							"name": "updatePercentFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								}
							],
							"name": "updatePoolMetadata",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_registry",
									"type": "address"
								}
							],
							"name": "updateRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_treasury",
									"type": "address"
								}
							],
							"name": "updateTreasury",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"events": {
							"BaseFeePaid(uint256,uint256)": {
								"params": {
									"amount": "Amount of the base fee paid",
									"poolId": "ID of the pool the base fee was paid for"
								}
							},
							"BaseFeeUpdated(uint256)": {
								"params": {
									"baseFee": "New base fee amount"
								}
							},
							"PercentFeeUpdated(uint256)": {
								"params": {
									"percentFee": "New percentage for the fee"
								}
							},
							"PoolCreated(uint256,bytes32,address,address,uint256,(uint256,string))": {
								"params": {
									"amount": "Amount pool was funded with when created",
									"metadata": "Pool metadata",
									"poolId": "ID of the pool created",
									"profileId": "ID of the profile the pool is associated with",
									"strategy": "Address of the strategy contract",
									"token": "Address of the token pool was funded with when created"
								}
							},
							"PoolFunded(uint256,uint256,uint256)": {
								"params": {
									"amount": "Amount funded to the pool",
									"fee": "Amount of the fee paid to the treasury",
									"poolId": "ID of the pool funded"
								}
							},
							"PoolMetadataUpdated(uint256,(uint256,string))": {
								"params": {
									"metadata": "Pool metadata that was updated",
									"poolId": "ID of the pool updated"
								}
							},
							"RegistryUpdated(address)": {
								"params": {
									"registry": "Address of the new registry"
								}
							},
							"StrategyApproved(address)": {
								"params": {
									"strategy": "Address of the strategy approved"
								}
							},
							"StrategyRemoved(address)": {
								"params": {
									"strategy": "Address of the strategy removed"
								}
							},
							"TreasuryUpdated(address)": {
								"params": {
									"treasury": "Address of the new treasury"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addPoolManager(uint256,address)": {
								"details": "'msg.sender' must be a pool admin.",
								"params": {
									"_manager": "The address of the manager to add",
									"_poolId": "The ID of the pool to add the manager to"
								}
							},
							"addToCloneableStrategies(address)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_strategy": "The address of the strategy to add"
								}
							},
							"allocate(uint256,bytes)": {
								"details": "Each strategy will handle the allocation of funds differently.",
								"params": {
									"_data": "The data to pass to the strategy and may be handled differently by each strategy.",
									"_poolId": "The ID of the pool to allocate funds from"
								}
							},
							"batchAllocate(uint256[],bytes[])": {
								"details": "Each strategy will handle the allocation of funds differently"
							},
							"batchRegisterRecipient(uint256[],bytes[])": {
								"params": {
									"_data": "The data to pass to the strategy and may be handled differently by each strategy",
									"_poolIds": "The pool ID's to register the recipients for"
								}
							},
							"distribute(uint256,address[],bytes)": {
								"details": "Each strategy will handle the distribution of funds differently",
								"params": {
									"_data": "The data to pass to the strategy and may be handled differently by each strategy",
									"_poolId": "The ID of the pool to distribute from",
									"_recipientIds": "The recipient ids to distribute to"
								}
							},
							"fundPool(uint256,uint256)": {
								"details": "'msg.value' must be greater than 0 if the token is the native token       or '_amount' must be greater than 0 if the token is not the native token.",
								"params": {
									"_amount": "The amount to fund the pool with",
									"_poolId": "The ID of the pool to fund"
								}
							},
							"getBaseFee()": {
								"returns": {
									"_0": "baseFee The current base fee"
								}
							},
							"getFeeDenominator()": {
								"details": "1e18 represents 100%",
								"returns": {
									"_0": "feeDenominator The current fee denominator"
								}
							},
							"getPercentFee()": {
								"returns": {
									"_0": "percentFee The current percentage for the fee"
								}
							},
							"getPool(uint256)": {
								"params": {
									"_poolId": "The ID of the pool to check"
								},
								"returns": {
									"_0": "pool The 'Pool' struct for the ID of the pool passed in"
								}
							},
							"getRegistry()": {
								"returns": {
									"_0": "registry The current registry address"
								}
							},
							"getStrategy(uint256)": {
								"params": {
									"_poolId": "The ID of the pool to check"
								},
								"returns": {
									"_0": "strategy The address of the strategy for the ID of the pool passed in"
								}
							},
							"getTreasury()": {
								"returns": {
									"_0": "treasury The current treasury address"
								}
							},
							"initialize(address,address,address,uint256,uint256)": {
								"params": {
									"_baseFee": "Base fee amount",
									"_owner": "Address of the owner",
									"_percentFee": "Percentage for the fee",
									"_registry": "Address of the registry contract",
									"_treasury": "Address of the treasury"
								}
							},
							"isCloneableStrategy(address)": {
								"params": {
									"_strategy": "The address of the strategy to check"
								},
								"returns": {
									"_0": "'true' if the '_strategy' is cloneable, otherwise 'false'"
								}
							},
							"isPoolAdmin(uint256,address)": {
								"params": {
									"_address": "The address to check",
									"_poolId": "The ID of the pool to check"
								},
								"returns": {
									"_0": "'true' if the '_address' is a pool admin, otherwise 'false'"
								}
							},
							"isPoolManager(uint256,address)": {
								"params": {
									"_address": "The address to check",
									"_poolId": "The ID of the pool to check"
								},
								"returns": {
									"_0": "'true' if the '_address' is a pool manager, otherwise 'false'"
								}
							},
							"recoverFunds(address,address)": {
								"details": "'msg.sender' must be a pool admin.",
								"params": {
									"_recipient": "The address to send the recovered funds to",
									"_token": "The token to recover"
								}
							},
							"registerRecipient(uint256,bytes)": {
								"params": {
									"_poolId": "The ID of the pool to register the recipient for"
								}
							},
							"removeFromCloneableStrategies(address)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_strategy": "The address of the strategy to remove"
								}
							},
							"removePoolManager(uint256,address)": {
								"details": "'msg.sender' must be a pool admin.",
								"params": {
									"_manager": "The address of the manager to remove",
									"_poolId": "The ID of the pool to remove the manager from"
								}
							},
							"updateBaseFee(uint256)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_baseFee": "The new base fee"
								}
							},
							"updatePercentFee(uint256)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_percentFee": "The new percentage for the fee"
								}
							},
							"updatePoolMetadata(uint256,(uint256,string))": {
								"details": "'msg.sender' must be a pool admin.",
								"params": {
									"_metadata": "The new metadata to set",
									"_poolId": "The ID of the pool to update"
								}
							},
							"updateRegistry(address)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_registry": "The new registry address"
								}
							},
							"updateTreasury(address)": {
								"details": "'msg.sender' must be the Allo contract owner.",
								"params": {
									"_treasury": "The new treasury address"
								}
							}
						},
						"title": "Allo Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addPoolManager(uint256,address)": "2cf682b0",
							"addToCloneableStrategies(address)": "41bba0b4",
							"allocate(uint256,bytes)": "2ec38188",
							"batchAllocate(uint256[],bytes[])": "c6dff1cf",
							"batchRegisterRecipient(uint256[],bytes[])": "1a20bd88",
							"createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])": "e1007d4a",
							"distribute(uint256,address[],bytes)": "3a5fbd92",
							"fundPool(uint256,uint256)": "5acd6fac",
							"getBaseFee()": "15e812ad",
							"getFeeDenominator()": "f4e1fc41",
							"getPercentFee()": "4edbaadc",
							"getPool(uint256)": "068bcd8d",
							"getRegistry()": "5ab1bd53",
							"getStrategy(uint256)": "cfc0cc34",
							"getTreasury()": "3b19e84a",
							"initialize(address,address,address,uint256,uint256)": "a6b63eb8",
							"isCloneableStrategy(address)": "ab2ec589",
							"isPoolAdmin(uint256,address)": "ab3febc6",
							"isPoolManager(uint256,address)": "29e40d4b",
							"recoverFunds(address,address)": "24ae6a27",
							"registerRecipient(uint256,bytes)": "075c0e9c",
							"removeFromCloneableStrategies(address)": "031e2fa1",
							"removePoolManager(uint256,address)": "7f5a70bd",
							"updateBaseFee(uint256)": "8e690186",
							"updatePercentFee(uint256)": "f54fc4a0",
							"updatePoolMetadata(uint256,(uint256,string))": "5f9ca138",
							"updateRegistry(address)": "1a5da6c8",
							"updateTreasury(address)": "7f51bb1f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BaseFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"BaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentFee\",\"type\":\"uint256\"}],\"name\":\"PercentFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PoolFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"PoolMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addToCloneableStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"batchAllocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"batchRegisterRecipient\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initStrategyData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"createPoolWithCustomStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"managerRole\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"internalType\":\"struct IAllo.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"isCloneableStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPoolAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPoolManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeFromCloneableStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removePoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"updateBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentFee\",\"type\":\"uint256\"}],\"name\":\"updatePercentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"}],\"name\":\"updatePoolMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"events\":{\"BaseFeePaid(uint256,uint256)\":{\"params\":{\"amount\":\"Amount of the base fee paid\",\"poolId\":\"ID of the pool the base fee was paid for\"}},\"BaseFeeUpdated(uint256)\":{\"params\":{\"baseFee\":\"New base fee amount\"}},\"PercentFeeUpdated(uint256)\":{\"params\":{\"percentFee\":\"New percentage for the fee\"}},\"PoolCreated(uint256,bytes32,address,address,uint256,(uint256,string))\":{\"params\":{\"amount\":\"Amount pool was funded with when created\",\"metadata\":\"Pool metadata\",\"poolId\":\"ID of the pool created\",\"profileId\":\"ID of the profile the pool is associated with\",\"strategy\":\"Address of the strategy contract\",\"token\":\"Address of the token pool was funded with when created\"}},\"PoolFunded(uint256,uint256,uint256)\":{\"params\":{\"amount\":\"Amount funded to the pool\",\"fee\":\"Amount of the fee paid to the treasury\",\"poolId\":\"ID of the pool funded\"}},\"PoolMetadataUpdated(uint256,(uint256,string))\":{\"params\":{\"metadata\":\"Pool metadata that was updated\",\"poolId\":\"ID of the pool updated\"}},\"RegistryUpdated(address)\":{\"params\":{\"registry\":\"Address of the new registry\"}},\"StrategyApproved(address)\":{\"params\":{\"strategy\":\"Address of the strategy approved\"}},\"StrategyRemoved(address)\":{\"params\":{\"strategy\":\"Address of the strategy removed\"}},\"TreasuryUpdated(address)\":{\"params\":{\"treasury\":\"Address of the new treasury\"}}},\"kind\":\"dev\",\"methods\":{\"addPoolManager(uint256,address)\":{\"details\":\"'msg.sender' must be a pool admin.\",\"params\":{\"_manager\":\"The address of the manager to add\",\"_poolId\":\"The ID of the pool to add the manager to\"}},\"addToCloneableStrategies(address)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_strategy\":\"The address of the strategy to add\"}},\"allocate(uint256,bytes)\":{\"details\":\"Each strategy will handle the allocation of funds differently.\",\"params\":{\"_data\":\"The data to pass to the strategy and may be handled differently by each strategy.\",\"_poolId\":\"The ID of the pool to allocate funds from\"}},\"batchAllocate(uint256[],bytes[])\":{\"details\":\"Each strategy will handle the allocation of funds differently\"},\"batchRegisterRecipient(uint256[],bytes[])\":{\"params\":{\"_data\":\"The data to pass to the strategy and may be handled differently by each strategy\",\"_poolIds\":\"The pool ID's to register the recipients for\"}},\"distribute(uint256,address[],bytes)\":{\"details\":\"Each strategy will handle the distribution of funds differently\",\"params\":{\"_data\":\"The data to pass to the strategy and may be handled differently by each strategy\",\"_poolId\":\"The ID of the pool to distribute from\",\"_recipientIds\":\"The recipient ids to distribute to\"}},\"fundPool(uint256,uint256)\":{\"details\":\"'msg.value' must be greater than 0 if the token is the native token       or '_amount' must be greater than 0 if the token is not the native token.\",\"params\":{\"_amount\":\"The amount to fund the pool with\",\"_poolId\":\"The ID of the pool to fund\"}},\"getBaseFee()\":{\"returns\":{\"_0\":\"baseFee The current base fee\"}},\"getFeeDenominator()\":{\"details\":\"1e18 represents 100%\",\"returns\":{\"_0\":\"feeDenominator The current fee denominator\"}},\"getPercentFee()\":{\"returns\":{\"_0\":\"percentFee The current percentage for the fee\"}},\"getPool(uint256)\":{\"params\":{\"_poolId\":\"The ID of the pool to check\"},\"returns\":{\"_0\":\"pool The 'Pool' struct for the ID of the pool passed in\"}},\"getRegistry()\":{\"returns\":{\"_0\":\"registry The current registry address\"}},\"getStrategy(uint256)\":{\"params\":{\"_poolId\":\"The ID of the pool to check\"},\"returns\":{\"_0\":\"strategy The address of the strategy for the ID of the pool passed in\"}},\"getTreasury()\":{\"returns\":{\"_0\":\"treasury The current treasury address\"}},\"initialize(address,address,address,uint256,uint256)\":{\"params\":{\"_baseFee\":\"Base fee amount\",\"_owner\":\"Address of the owner\",\"_percentFee\":\"Percentage for the fee\",\"_registry\":\"Address of the registry contract\",\"_treasury\":\"Address of the treasury\"}},\"isCloneableStrategy(address)\":{\"params\":{\"_strategy\":\"The address of the strategy to check\"},\"returns\":{\"_0\":\"'true' if the '_strategy' is cloneable, otherwise 'false'\"}},\"isPoolAdmin(uint256,address)\":{\"params\":{\"_address\":\"The address to check\",\"_poolId\":\"The ID of the pool to check\"},\"returns\":{\"_0\":\"'true' if the '_address' is a pool admin, otherwise 'false'\"}},\"isPoolManager(uint256,address)\":{\"params\":{\"_address\":\"The address to check\",\"_poolId\":\"The ID of the pool to check\"},\"returns\":{\"_0\":\"'true' if the '_address' is a pool manager, otherwise 'false'\"}},\"recoverFunds(address,address)\":{\"details\":\"'msg.sender' must be a pool admin.\",\"params\":{\"_recipient\":\"The address to send the recovered funds to\",\"_token\":\"The token to recover\"}},\"registerRecipient(uint256,bytes)\":{\"params\":{\"_poolId\":\"The ID of the pool to register the recipient for\"}},\"removeFromCloneableStrategies(address)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_strategy\":\"The address of the strategy to remove\"}},\"removePoolManager(uint256,address)\":{\"details\":\"'msg.sender' must be a pool admin.\",\"params\":{\"_manager\":\"The address of the manager to remove\",\"_poolId\":\"The ID of the pool to remove the manager from\"}},\"updateBaseFee(uint256)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_baseFee\":\"The new base fee\"}},\"updatePercentFee(uint256)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_percentFee\":\"The new percentage for the fee\"}},\"updatePoolMetadata(uint256,(uint256,string))\":{\"details\":\"'msg.sender' must be a pool admin.\",\"params\":{\"_metadata\":\"The new metadata to set\",\"_poolId\":\"The ID of the pool to update\"}},\"updateRegistry(address)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_registry\":\"The new registry address\"}},\"updateTreasury(address)\":{\"details\":\"'msg.sender' must be the Allo contract owner.\",\"params\":{\"_treasury\":\"The new treasury address\"}}},\"title\":\"Allo Interface\",\"version\":1},\"userdoc\":{\"events\":{\"BaseFeePaid(uint256,uint256)\":{\"notice\":\"Emitted when the base fee is paid\"},\"BaseFeeUpdated(uint256)\":{\"notice\":\"Emitted when the base fee is updated\"},\"PercentFeeUpdated(uint256)\":{\"notice\":\"Emitted when the percent fee is updated\"},\"PoolCreated(uint256,bytes32,address,address,uint256,(uint256,string))\":{\"notice\":\"Event emitted when a new pool is created\"},\"PoolFunded(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a pool is funded\"},\"PoolMetadataUpdated(uint256,(uint256,string))\":{\"notice\":\"Emitted when a pools metadata is updated\"},\"RegistryUpdated(address)\":{\"notice\":\"Emitted when the registry address is updated\"},\"StrategyApproved(address)\":{\"notice\":\"Emitted when a strategy is approved and added to the cloneable strategies\"},\"StrategyRemoved(address)\":{\"notice\":\"Emitted when a strategy is removed from the cloneable strategies\"},\"TreasuryUpdated(address)\":{\"notice\":\"Emitted when the treasury address is updated\"}},\"kind\":\"user\",\"methods\":{\"addPoolManager(uint256,address)\":{\"notice\":\"Adds a pool manager to the pool.\"},\"addToCloneableStrategies(address)\":{\"notice\":\"Adds a strategy to the cloneable strategies.\"},\"allocate(uint256,bytes)\":{\"notice\":\"Allocates funds to a recipient.\"},\"batchAllocate(uint256[],bytes[])\":{\"notice\":\"Allocates funds to multiple recipients.\"},\"batchRegisterRecipient(uint256[],bytes[])\":{\"notice\":\"Registers a batch of recipients.\"},\"distribute(uint256,address[],bytes)\":{\"notice\":\"Distributes funds to recipients and emits {Distributed} event if successful\"},\"fundPool(uint256,uint256)\":{\"notice\":\"Funds a pool.\"},\"getBaseFee()\":{\"notice\":\"Returns the current base fee\"},\"getFeeDenominator()\":{\"notice\":\"Returns the current fee denominator\"},\"getPercentFee()\":{\"notice\":\"Returns the current percent fee\"},\"getPool(uint256)\":{\"notice\":\"Returns the 'Pool' struct for a given 'poolId'\"},\"getRegistry()\":{\"notice\":\"Returns the current registry address\"},\"getStrategy(uint256)\":{\"notice\":\"Returns the address of the strategy for a given 'poolId'\"},\"getTreasury()\":{\"notice\":\"Returns the current treasury address\"},\"initialize(address,address,address,uint256,uint256)\":{\"notice\":\"Initialize the Allo contract\"},\"isCloneableStrategy(address)\":{\"notice\":\"Checks if a strategy is cloneable (is in the cloneableStrategies mapping).\"},\"isPoolAdmin(uint256,address)\":{\"notice\":\"Checks if an address is a pool admin.\"},\"isPoolManager(uint256,address)\":{\"notice\":\"Checks if an address is a pool manager.\"},\"recoverFunds(address,address)\":{\"notice\":\"Recovers funds from a pool.\"},\"registerRecipient(uint256,bytes)\":{\"notice\":\"Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy.\"},\"removeFromCloneableStrategies(address)\":{\"notice\":\"Removes a strategy from the cloneable strategies.\"},\"removePoolManager(uint256,address)\":{\"notice\":\"Removes a pool manager from the pool.\"},\"updateBaseFee(uint256)\":{\"notice\":\"Updates the base fee.\"},\"updatePercentFee(uint256)\":{\"notice\":\"Updates the percentage for the fee.\"},\"updatePoolMetadata(uint256,(uint256,string))\":{\"notice\":\"Updates a pools metadata.\"},\"updateRegistry(address)\":{\"notice\":\"Update the registry address.\"},\"updateTreasury(address)\":{\"notice\":\"Updates the treasury address.\"}},\"notice\":\"Interface for the Allo contract. It exposes all functions needed to use the Allo protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol\":\"IAllo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol\":{\"keccak256\":\"0xe1ccd35e03787b4a5beb138c336f5fc617f4885726bfdf3c82a642499e21f785\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7369418f7c7a3a16c38ed506ceb4e873f0806e6d68db2f682fa46b0e6070a74a\",\"dweb:/ipfs/Qmc4MiHqKdPdd7H7me8h5LsjHMt7KgAdUg5phGUTHMVsdc\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487\",\"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x96444e1b6b4adf69d76debd36a792d618e50a7902248ed84b6f07ccdab946893\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://eee957068fb48e486d8186d61e8a002a85a0e0004763c88ba03552afb47f3bf5\",\"dweb:/ipfs/QmWawMnwBMj8tyUoL6RMJtXbeSZUqLUN7iFieQqgUnFYro\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"BaseFeePaid(uint256,uint256)": {
								"notice": "Emitted when the base fee is paid"
							},
							"BaseFeeUpdated(uint256)": {
								"notice": "Emitted when the base fee is updated"
							},
							"PercentFeeUpdated(uint256)": {
								"notice": "Emitted when the percent fee is updated"
							},
							"PoolCreated(uint256,bytes32,address,address,uint256,(uint256,string))": {
								"notice": "Event emitted when a new pool is created"
							},
							"PoolFunded(uint256,uint256,uint256)": {
								"notice": "Emitted when a pool is funded"
							},
							"PoolMetadataUpdated(uint256,(uint256,string))": {
								"notice": "Emitted when a pools metadata is updated"
							},
							"RegistryUpdated(address)": {
								"notice": "Emitted when the registry address is updated"
							},
							"StrategyApproved(address)": {
								"notice": "Emitted when a strategy is approved and added to the cloneable strategies"
							},
							"StrategyRemoved(address)": {
								"notice": "Emitted when a strategy is removed from the cloneable strategies"
							},
							"TreasuryUpdated(address)": {
								"notice": "Emitted when the treasury address is updated"
							}
						},
						"kind": "user",
						"methods": {
							"addPoolManager(uint256,address)": {
								"notice": "Adds a pool manager to the pool."
							},
							"addToCloneableStrategies(address)": {
								"notice": "Adds a strategy to the cloneable strategies."
							},
							"allocate(uint256,bytes)": {
								"notice": "Allocates funds to a recipient."
							},
							"batchAllocate(uint256[],bytes[])": {
								"notice": "Allocates funds to multiple recipients."
							},
							"batchRegisterRecipient(uint256[],bytes[])": {
								"notice": "Registers a batch of recipients."
							},
							"distribute(uint256,address[],bytes)": {
								"notice": "Distributes funds to recipients and emits {Distributed} event if successful"
							},
							"fundPool(uint256,uint256)": {
								"notice": "Funds a pool."
							},
							"getBaseFee()": {
								"notice": "Returns the current base fee"
							},
							"getFeeDenominator()": {
								"notice": "Returns the current fee denominator"
							},
							"getPercentFee()": {
								"notice": "Returns the current percent fee"
							},
							"getPool(uint256)": {
								"notice": "Returns the 'Pool' struct for a given 'poolId'"
							},
							"getRegistry()": {
								"notice": "Returns the current registry address"
							},
							"getStrategy(uint256)": {
								"notice": "Returns the address of the strategy for a given 'poolId'"
							},
							"getTreasury()": {
								"notice": "Returns the current treasury address"
							},
							"initialize(address,address,address,uint256,uint256)": {
								"notice": "Initialize the Allo contract"
							},
							"isCloneableStrategy(address)": {
								"notice": "Checks if a strategy is cloneable (is in the cloneableStrategies mapping)."
							},
							"isPoolAdmin(uint256,address)": {
								"notice": "Checks if an address is a pool admin."
							},
							"isPoolManager(uint256,address)": {
								"notice": "Checks if an address is a pool manager."
							},
							"recoverFunds(address,address)": {
								"notice": "Recovers funds from a pool."
							},
							"registerRecipient(uint256,bytes)": {
								"notice": "Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy."
							},
							"removeFromCloneableStrategies(address)": {
								"notice": "Removes a strategy from the cloneable strategies."
							},
							"removePoolManager(uint256,address)": {
								"notice": "Removes a pool manager from the pool."
							},
							"updateBaseFee(uint256)": {
								"notice": "Updates the base fee."
							},
							"updatePercentFee(uint256)": {
								"notice": "Updates the percentage for the fee."
							},
							"updatePoolMetadata(uint256,(uint256,string))": {
								"notice": "Updates a pools metadata."
							},
							"updateRegistry(address)": {
								"notice": "Update the registry address."
							},
							"updateTreasury(address)": {
								"notice": "Updates the treasury address."
							}
						},
						"notice": "Interface for the Allo contract. It exposes all functions needed to use the Allo protocol.",
						"version": 1
					}
				}
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol": {
				"IRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"indexed": false,
									"internalType": "struct Metadata",
									"name": "metadata",
									"type": "tuple"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "anchor",
									"type": "address"
								}
							],
							"name": "ProfileCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"indexed": false,
									"internalType": "struct Metadata",
									"name": "metadata",
									"type": "tuple"
								}
							],
							"name": "ProfileMetadataUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "anchor",
									"type": "address"
								}
							],
							"name": "ProfileNameUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ProfileOwnerUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pendingOwner",
									"type": "address"
								}
							],
							"name": "ProfilePendingOwnerUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								}
							],
							"name": "acceptProfileOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address[]",
									"name": "_members",
									"type": "address[]"
								}
							],
							"name": "addMembers",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_nonce",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "_name",
									"type": "string"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "_members",
									"type": "address[]"
								}
							],
							"name": "createProfile",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "profileId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_anchor",
									"type": "address"
								}
							],
							"name": "getProfileByAnchor",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "id",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "name",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "protocol",
													"type": "uint256"
												},
												{
													"internalType": "string",
													"name": "pointer",
													"type": "string"
												}
											],
											"internalType": "struct Metadata",
											"name": "metadata",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "owner",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "anchor",
											"type": "address"
										}
									],
									"internalType": "struct IRegistry.Profile",
									"name": "profile",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								}
							],
							"name": "getProfileById",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "id",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "name",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "protocol",
													"type": "uint256"
												},
												{
													"internalType": "string",
													"name": "pointer",
													"type": "string"
												}
											],
											"internalType": "struct Metadata",
											"name": "metadata",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "owner",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "anchor",
											"type": "address"
										}
									],
									"internalType": "struct IRegistry.Profile",
									"name": "profile",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_member",
									"type": "address"
								}
							],
							"name": "isMemberOfProfile",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isMemberOfProfile",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "isOwnerOfProfile",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isOwnerOfProfile",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_account",
									"type": "address"
								}
							],
							"name": "isOwnerOrMemberOfProfile",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isOwnerOrMemberOfProfile",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_recipient",
									"type": "address"
								}
							],
							"name": "recoverFunds",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address[]",
									"name": "_members",
									"type": "address[]"
								}
							],
							"name": "removeMembers",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "protocol",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "pointer",
											"type": "string"
										}
									],
									"internalType": "struct Metadata",
									"name": "_metadata",
									"type": "tuple"
								}
							],
							"name": "updateProfileMetadata",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "_name",
									"type": "string"
								}
							],
							"name": "updateProfileName",
							"outputs": [
								{
									"internalType": "address",
									"name": "anchor",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_profileId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_pendingOwner",
									"type": "address"
								}
							],
							"name": "updateProfilePendingOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"details": "The Registry Interface is used to interact with the Allo protocol and create profiles      that can be used to interact with the Allo protocol. The Registry is the main contract      that all other contracts interact with to get the 'Profile' information needed to      interact with the Allo protocol. The Registry is also used to create new profiles      and update existing profiles. The Registry is also used to add and remove members      from a profile. The Registry will not always be used in a strategy and will depend on      the strategy being used.",
						"events": {
							"ProfileCreated(bytes32,uint256,string,(uint256,string),address,address)": {
								"details": "Emitted when a profile is created. This will return your anchor address."
							},
							"ProfileMetadataUpdated(bytes32,(uint256,string))": {
								"details": "Emitted when a profile's metadata is updated."
							},
							"ProfileNameUpdated(bytes32,string,address)": {
								"details": "Emitted when a profile name is updated. This will update the anchor when the name is updated and return it."
							},
							"ProfileOwnerUpdated(bytes32,address)": {
								"details": "Emitted when a profile owner is updated."
							},
							"ProfilePendingOwnerUpdated(bytes32,address)": {
								"details": "Emitted when a profile pending owner is updated."
							}
						},
						"kind": "dev",
						"methods": {
							"acceptProfileOwnership(bytes32)": {
								"details": "Accepts the pending 'owner' of the '_profileId' passed in Requirements: Only the pending owner can accept the ownership",
								"params": {
									"_profileId": "The 'profileId' to accept the ownership for"
								}
							},
							"addMembers(bytes32,address[])": {
								"details": "Adds members to the '_profileId' passed in Requirements: Only the 'Profile' owner can add members",
								"params": {
									"_members": "The members to add to the '_profileId' passed in",
									"_profileId": "The 'profileId' to add members to"
								}
							},
							"createProfile(uint256,string,(uint256,string),address,address[])": {
								"details": "Creates a new 'Profile' and returns the 'profileId' of the new profile Note: The 'name' and 'nonce' are used to generate the 'anchor' address Requirements: None, anyone can create a new profile",
								"params": {
									"_members": "The 'members' to use to generate the 'anchor' address",
									"_metadata": "The 'Metadata' to use to generate the 'anchor' address",
									"_name": "The name to use to generate the 'anchor' address",
									"_nonce": "The nonce to use to generate the 'anchor' address",
									"_owner": "The 'owner' to use to generate the 'anchor' address"
								},
								"returns": {
									"profileId": "The 'profileId' of the new profile"
								}
							},
							"getProfileByAnchor(address)": {
								"details": "Returns the 'Profile' for an '_anchor' passed",
								"params": {
									"_anchor": "The 'anchor' to return the 'Profile' for"
								},
								"returns": {
									"profile": "The 'Profile' for the '_anchor' passed"
								}
							},
							"getProfileById(bytes32)": {
								"details": "Returns the 'Profile' for a '_profileId' passed",
								"params": {
									"_profileId": "The 'profileId' to return the 'Profile' for"
								},
								"returns": {
									"profile": "The 'Profile' for the '_profileId' passed"
								}
							},
							"isMemberOfProfile(bytes32,address)": {
								"details": "Returns a boolean if the '_account' is a member of the '_profileId' passed in",
								"params": {
									"_member": "The 'member' to check if they are a member of the '_profileId' passed in",
									"_profileId": "The 'profileId' to check if the '_account' is a member of"
								},
								"returns": {
									"isMemberOfProfile": "A boolean if the '_account' is a member of the '_profileId' passed in"
								}
							},
							"isOwnerOfProfile(bytes32,address)": {
								"details": "Returns a boolean if the '_account' is an owner of the '_profileId' passed in",
								"params": {
									"_owner": "The 'owner' to check if they are an owner of the '_profileId' passed in",
									"_profileId": "The 'profileId' to check if the '_account' is an owner of"
								},
								"returns": {
									"isOwnerOfProfile": "A boolean if the '_account' is an owner of the '_profileId' passed in"
								}
							},
							"isOwnerOrMemberOfProfile(bytes32,address)": {
								"details": "Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in",
								"params": {
									"_account": "The 'account' to check if they are a member or owner of the '_profileId' passed in",
									"_profileId": "The 'profileId' to check if the '_account' is a member or owner of"
								},
								"returns": {
									"isOwnerOrMemberOfProfile": "A boolean if the '_account' is a member or owner of the '_profileId' passed in"
								}
							},
							"recoverFunds(address,address)": {
								"details": "Recovers funds from the contract Requirements: Must be the Allo owner",
								"params": {
									"_recipient": "The recipient of the recovered funds",
									"_token": "The token you want to use to recover funds"
								}
							},
							"removeMembers(bytes32,address[])": {
								"details": "Removes members from the '_profileId' passed in Requirements: Only the 'Profile' owner can remove members",
								"params": {
									"_members": "The members to remove from the '_profileId' passed in",
									"_profileId": "The 'profileId' to remove members from"
								}
							},
							"updateProfileMetadata(bytes32,(uint256,string))": {
								"details": "Updates the 'Metadata' of the '_profileId' passed in Requirements: Only the 'Profile' owner can update the metadata",
								"params": {
									"_metadata": "The new 'Metadata' value",
									"_profileId": "The 'profileId' to update the metadata for"
								}
							},
							"updateProfileName(bytes32,string)": {
								"details": "Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address Requirements: Only the 'Profile' owner can update the name Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'       so please use caution. You can always recreate your 'anchor' address by updating the name back       to the original name used to create the profile.",
								"params": {
									"_name": "The new 'name' value",
									"_profileId": "The 'profileId' to update the name for"
								},
								"returns": {
									"anchor": "The new 'anchor' address"
								}
							},
							"updateProfilePendingOwner(bytes32,address)": {
								"details": "Updates the pending 'owner' of the '_profileId' passed in Requirements: Only the 'Profile' owner can update the pending owner",
								"params": {
									"_pendingOwner": "The new pending 'owner' value",
									"_profileId": "The 'profileId' to update the pending owner for"
								}
							}
						},
						"title": "IRegistry Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"acceptProfileOwnership(bytes32)": "2497f3c6",
							"addMembers(bytes32,address[])": "5063f361",
							"createProfile(uint256,string,(uint256,string),address,address[])": "3a92f65f",
							"getProfileByAnchor(address)": "dd93da43",
							"getProfileById(bytes32)": "0114cf0a",
							"isMemberOfProfile(bytes32,address)": "0ec1fbac",
							"isOwnerOfProfile(bytes32,address)": "39b86b8c",
							"isOwnerOrMemberOfProfile(bytes32,address)": "5e8a7915",
							"recoverFunds(address,address)": "24ae6a27",
							"removeMembers(bytes32,address[])": "e0cf1e4c",
							"updateProfileMetadata(bytes32,(uint256,string))": "ac402839",
							"updateProfileName(bytes32,string)": "cf189ff2",
							"updateProfilePendingOwner(bytes32,address)": "3b66dacd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"name\":\"ProfileCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"ProfileMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"name\":\"ProfileNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProfileOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ProfilePendingOwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"}],\"name\":\"acceptProfileOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"addMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"createProfile\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anchor\",\"type\":\"address\"}],\"name\":\"getProfileByAnchor\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"internalType\":\"struct IRegistry.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"}],\"name\":\"getProfileById\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"internalType\":\"struct IRegistry.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"isMemberOfProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMemberOfProfile\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwnerOfProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOwnerOfProfile\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOwnerOrMemberOfProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOwnerOrMemberOfProfile\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"removeMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"}],\"name\":\"updateProfileMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateProfileName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_pendingOwner\",\"type\":\"address\"}],\"name\":\"updateProfilePendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"details\":\"The Registry Interface is used to interact with the Allo protocol and create profiles      that can be used to interact with the Allo protocol. The Registry is the main contract      that all other contracts interact with to get the 'Profile' information needed to      interact with the Allo protocol. The Registry is also used to create new profiles      and update existing profiles. The Registry is also used to add and remove members      from a profile. The Registry will not always be used in a strategy and will depend on      the strategy being used.\",\"events\":{\"ProfileCreated(bytes32,uint256,string,(uint256,string),address,address)\":{\"details\":\"Emitted when a profile is created. This will return your anchor address.\"},\"ProfileMetadataUpdated(bytes32,(uint256,string))\":{\"details\":\"Emitted when a profile's metadata is updated.\"},\"ProfileNameUpdated(bytes32,string,address)\":{\"details\":\"Emitted when a profile name is updated. This will update the anchor when the name is updated and return it.\"},\"ProfileOwnerUpdated(bytes32,address)\":{\"details\":\"Emitted when a profile owner is updated.\"},\"ProfilePendingOwnerUpdated(bytes32,address)\":{\"details\":\"Emitted when a profile pending owner is updated.\"}},\"kind\":\"dev\",\"methods\":{\"acceptProfileOwnership(bytes32)\":{\"details\":\"Accepts the pending 'owner' of the '_profileId' passed in Requirements: Only the pending owner can accept the ownership\",\"params\":{\"_profileId\":\"The 'profileId' to accept the ownership for\"}},\"addMembers(bytes32,address[])\":{\"details\":\"Adds members to the '_profileId' passed in Requirements: Only the 'Profile' owner can add members\",\"params\":{\"_members\":\"The members to add to the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to add members to\"}},\"createProfile(uint256,string,(uint256,string),address,address[])\":{\"details\":\"Creates a new 'Profile' and returns the 'profileId' of the new profile Note: The 'name' and 'nonce' are used to generate the 'anchor' address Requirements: None, anyone can create a new profile\",\"params\":{\"_members\":\"The 'members' to use to generate the 'anchor' address\",\"_metadata\":\"The 'Metadata' to use to generate the 'anchor' address\",\"_name\":\"The name to use to generate the 'anchor' address\",\"_nonce\":\"The nonce to use to generate the 'anchor' address\",\"_owner\":\"The 'owner' to use to generate the 'anchor' address\"},\"returns\":{\"profileId\":\"The 'profileId' of the new profile\"}},\"getProfileByAnchor(address)\":{\"details\":\"Returns the 'Profile' for an '_anchor' passed\",\"params\":{\"_anchor\":\"The 'anchor' to return the 'Profile' for\"},\"returns\":{\"profile\":\"The 'Profile' for the '_anchor' passed\"}},\"getProfileById(bytes32)\":{\"details\":\"Returns the 'Profile' for a '_profileId' passed\",\"params\":{\"_profileId\":\"The 'profileId' to return the 'Profile' for\"},\"returns\":{\"profile\":\"The 'Profile' for the '_profileId' passed\"}},\"isMemberOfProfile(bytes32,address)\":{\"details\":\"Returns a boolean if the '_account' is a member of the '_profileId' passed in\",\"params\":{\"_member\":\"The 'member' to check if they are a member of the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to check if the '_account' is a member of\"},\"returns\":{\"isMemberOfProfile\":\"A boolean if the '_account' is a member of the '_profileId' passed in\"}},\"isOwnerOfProfile(bytes32,address)\":{\"details\":\"Returns a boolean if the '_account' is an owner of the '_profileId' passed in\",\"params\":{\"_owner\":\"The 'owner' to check if they are an owner of the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to check if the '_account' is an owner of\"},\"returns\":{\"isOwnerOfProfile\":\"A boolean if the '_account' is an owner of the '_profileId' passed in\"}},\"isOwnerOrMemberOfProfile(bytes32,address)\":{\"details\":\"Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in\",\"params\":{\"_account\":\"The 'account' to check if they are a member or owner of the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to check if the '_account' is a member or owner of\"},\"returns\":{\"isOwnerOrMemberOfProfile\":\"A boolean if the '_account' is a member or owner of the '_profileId' passed in\"}},\"recoverFunds(address,address)\":{\"details\":\"Recovers funds from the contract Requirements: Must be the Allo owner\",\"params\":{\"_recipient\":\"The recipient of the recovered funds\",\"_token\":\"The token you want to use to recover funds\"}},\"removeMembers(bytes32,address[])\":{\"details\":\"Removes members from the '_profileId' passed in Requirements: Only the 'Profile' owner can remove members\",\"params\":{\"_members\":\"The members to remove from the '_profileId' passed in\",\"_profileId\":\"The 'profileId' to remove members from\"}},\"updateProfileMetadata(bytes32,(uint256,string))\":{\"details\":\"Updates the 'Metadata' of the '_profileId' passed in Requirements: Only the 'Profile' owner can update the metadata\",\"params\":{\"_metadata\":\"The new 'Metadata' value\",\"_profileId\":\"The 'profileId' to update the metadata for\"}},\"updateProfileName(bytes32,string)\":{\"details\":\"Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address Requirements: Only the 'Profile' owner can update the name Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'       so please use caution. You can always recreate your 'anchor' address by updating the name back       to the original name used to create the profile.\",\"params\":{\"_name\":\"The new 'name' value\",\"_profileId\":\"The 'profileId' to update the name for\"},\"returns\":{\"anchor\":\"The new 'anchor' address\"}},\"updateProfilePendingOwner(bytes32,address)\":{\"details\":\"Updates the pending 'owner' of the '_profileId' passed in Requirements: Only the 'Profile' owner can update the pending owner\",\"params\":{\"_pendingOwner\":\"The new pending 'owner' value\",\"_profileId\":\"The 'profileId' to update the pending owner for\"}}},\"title\":\"IRegistry Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for the Registry contract and exposes all functions needed to use the Registry         within the Allo protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol\":\"IRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x96444e1b6b4adf69d76debd36a792d618e50a7902248ed84b6f07ccdab946893\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://eee957068fb48e486d8186d61e8a002a85a0e0004763c88ba03552afb47f3bf5\",\"dweb:/ipfs/QmWawMnwBMj8tyUoL6RMJtXbeSZUqLUN7iFieQqgUnFYro\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Interface for the Registry contract and exposes all functions needed to use the Registry         within the Allo protocol.",
						"version": 1
					}
				}
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol": {
				"IStrategy": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Allocated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipientAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Distributed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "poolId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"name": "PoolActive",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientId",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Registered",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllo",
							"outputs": [
								{
									"internalType": "contract IAllo",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_recipientIds",
									"type": "address[]"
								},
								{
									"internalType": "bytes[]",
									"name": "_data",
									"type": "bytes[]"
								}
							],
							"name": "getPayouts",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "recipientAddress",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										}
									],
									"internalType": "struct IStrategy.PayoutSummary[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPoolId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_recipientId",
									"type": "address"
								}
							],
							"name": "getRecipientStatus",
							"outputs": [
								{
									"internalType": "enum IStrategy.Status",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getStrategyId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "increasePoolAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_poolId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isPoolActive",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_allocator",
									"type": "address"
								}
							],
							"name": "isValidAllocator",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								}
							],
							"name": "registerRecipient",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>",
						"events": {
							"Allocated(address,uint256,address,address)": {
								"params": {
									"amount": "The amount allocated",
									"recipientId": "The ID of the recipient",
									"token": "The token allocated"
								}
							},
							"Distributed(address,address,uint256,address)": {
								"params": {
									"amount": "The amount distributed",
									"recipientAddress": "The recipient",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							},
							"Initialized(uint256,bytes)": {
								"params": {
									"data": "The data passed to the 'initialize' function",
									"poolId": "The ID of the pool"
								}
							},
							"PoolActive(bool)": {
								"params": {
									"active": "The status of the pool"
								}
							},
							"Registered(address,bytes,address)": {
								"params": {
									"data": "The data passed to the 'registerRecipient' function",
									"recipientId": "The ID of the recipient",
									"sender": "The sender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allocate(bytes,address)": {
								"details": "The encoded '_data' will be determined by the strategy implementation.",
								"params": {
									"_data": "The data to use to allocate to the recipient",
									"_sender": "The address of the sender"
								}
							},
							"distribute(address[],bytes,address)": {
								"details": "most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference this contract will need to track the amount paid already, so that it doesn't double pay."
							},
							"getAllo()": {
								"returns": {
									"_0": "The 'Allo' contract"
								}
							},
							"getPayouts(address[],bytes[])": {
								"details": "Input the values you would send to distribute(), get the amounts each recipient in the array would receive.      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.",
								"params": {
									"_data": "The encoded data",
									"_recipientIds": "The IDs of the recipients"
								}
							},
							"getPoolAmount()": {
								"returns": {
									"_0": "The balance of the pool"
								}
							},
							"getPoolId()": {
								"returns": {
									"_0": "The ID of the pool"
								}
							},
							"getRecipientStatus(address)": {
								"params": {
									"_recipientId": "The ID of the recipient"
								},
								"returns": {
									"_0": "The status of the recipient"
								}
							},
							"getStrategyId()": {
								"returns": {
									"_0": "The ID of the strategy"
								}
							},
							"increasePoolAmount(uint256)": {
								"params": {
									"_amount": "The amount to increase the pool by"
								}
							},
							"initialize(uint256,bytes)": {
								"params": {
									"_data": "The encoded data",
									"_poolId": "The ID of the pool"
								}
							},
							"isPoolActive()": {
								"returns": {
									"_0": "Whether the pool is active or not"
								}
							},
							"isValidAllocator(address)": {
								"params": {
									"_allocator": "The allocator to check"
								},
								"returns": {
									"_0": "Whether the allocator is valid or not"
								}
							},
							"registerRecipient(bytes,address)": {
								"details": "Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional      functions should be added to allow the owner to check this. The owner could also check attestations directly      and then accept for instance. The '_data' will be determined by the strategy implementation.",
								"params": {
									"_data": "The data to use to register the recipient",
									"_sender": "The address of the sender"
								},
								"returns": {
									"_0": "The ID of the recipient"
								}
							}
						},
						"title": "IStrategy Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allocate(bytes,address)": "ef2920fc",
							"distribute(address[],bytes,address)": "0a6f0ee9",
							"getAllo()": "15cc481e",
							"getPayouts(address[],bytes[])": "b2b878d0",
							"getPoolAmount()": "4ab4ba42",
							"getPoolId()": "38fff2d0",
							"getRecipientStatus(address)": "eb11af93",
							"getStrategyId()": "42fda9c7",
							"increasePoolAmount(uint256)": "f5b0dfb7",
							"initialize(uint256,bytes)": "edd146cc",
							"isPoolActive()": "df868ed3",
							"isValidAllocator(address)": "4d31d087",
							"registerRecipient(bytes,address)": "2bbe0cae"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"PoolActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllo\",\"outputs\":[{\"internalType\":\"contract IAllo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"getPayouts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.PayoutSummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientId\",\"type\":\"address\"}],\"name\":\"getRecipientStatus\",\"outputs\":[{\"internalType\":\"enum IStrategy.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increasePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"}],\"name\":\"isValidAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"events\":{\"Allocated(address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount allocated\",\"recipientId\":\"The ID of the recipient\",\"token\":\"The token allocated\"}},\"Distributed(address,address,uint256,address)\":{\"params\":{\"amount\":\"The amount distributed\",\"recipientAddress\":\"The recipient\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}},\"Initialized(uint256,bytes)\":{\"params\":{\"data\":\"The data passed to the 'initialize' function\",\"poolId\":\"The ID of the pool\"}},\"PoolActive(bool)\":{\"params\":{\"active\":\"The status of the pool\"}},\"Registered(address,bytes,address)\":{\"params\":{\"data\":\"The data passed to the 'registerRecipient' function\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}}},\"kind\":\"dev\",\"methods\":{\"allocate(bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to allocate to the recipient\",\"_sender\":\"The address of the sender\"}},\"distribute(address[],bytes,address)\":{\"details\":\"most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference this contract will need to track the amount paid already, so that it doesn't double pay.\"},\"getAllo()\":{\"returns\":{\"_0\":\"The 'Allo' contract\"}},\"getPayouts(address[],bytes[])\":{\"details\":\"Input the values you would send to distribute(), get the amounts each recipient in the array would receive.      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\",\"params\":{\"_data\":\"The encoded data\",\"_recipientIds\":\"The IDs of the recipients\"}},\"getPoolAmount()\":{\"returns\":{\"_0\":\"The balance of the pool\"}},\"getPoolId()\":{\"returns\":{\"_0\":\"The ID of the pool\"}},\"getRecipientStatus(address)\":{\"params\":{\"_recipientId\":\"The ID of the recipient\"},\"returns\":{\"_0\":\"The status of the recipient\"}},\"getStrategyId()\":{\"returns\":{\"_0\":\"The ID of the strategy\"}},\"increasePoolAmount(uint256)\":{\"params\":{\"_amount\":\"The amount to increase the pool by\"}},\"initialize(uint256,bytes)\":{\"params\":{\"_data\":\"The encoded data\",\"_poolId\":\"The ID of the pool\"}},\"isPoolActive()\":{\"returns\":{\"_0\":\"Whether the pool is active or not\"}},\"isValidAllocator(address)\":{\"params\":{\"_allocator\":\"The allocator to check\"},\"returns\":{\"_0\":\"Whether the allocator is valid or not\"}},\"registerRecipient(bytes,address)\":{\"details\":\"Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional      functions should be added to allow the owner to check this. The owner could also check attestations directly      and then accept for instance. The '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to register the recipient\",\"_sender\":\"The address of the sender\"},\"returns\":{\"_0\":\"The ID of the recipient\"}}},\"title\":\"IStrategy Interface\",\"version\":1},\"userdoc\":{\"events\":{\"Allocated(address,uint256,address,address)\":{\"notice\":\"Emitted when a recipient is allocated to.\"},\"Distributed(address,address,uint256,address)\":{\"notice\":\"Emitted when tokens are distributed.\"},\"Initialized(uint256,bytes)\":{\"notice\":\"Emitted when strategy is initialized.\"},\"PoolActive(bool)\":{\"notice\":\"Emitted when pool is set to active status.\"},\"Registered(address,bytes,address)\":{\"notice\":\"Emitted when a recipient is registered.\"}},\"kind\":\"user\",\"methods\":{\"allocate(bytes,address)\":{\"notice\":\"This will allocate to a recipient.\"},\"distribute(address[],bytes,address)\":{\"notice\":\"This will distribute funds (tokens) to recipients.\"},\"getAllo()\":{\"notice\":\"Getter for the address of the Allo contract.\"},\"getPayouts(address[],bytes[])\":{\"notice\":\"Checks the amount allocated to a recipient for distribution.\"},\"getPoolAmount()\":{\"notice\":\"Checks the amount of tokens in the pool.\"},\"getPoolId()\":{\"notice\":\"Getter for the 'poolId' for this strategy.\"},\"getRecipientStatus(address)\":{\"notice\":\"Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those      since there is no need for Pending or Rejected.\"},\"getStrategyId()\":{\"notice\":\"Getter for the 'id' of the strategy.\"},\"increasePoolAmount(uint256)\":{\"notice\":\"Increases the balance of the pool.\"},\"initialize(uint256,bytes)\":{\"notice\":\"@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize().\"},\"isPoolActive()\":{\"notice\":\"whether pool is active.\"},\"isValidAllocator(address)\":{\"notice\":\"Checks whether a allocator is valid or not, will usually be true for all strategies      and will depend on the strategy implementation.\"},\"registerRecipient(bytes,address)\":{\"notice\":\"This will register a recipient, set their status (and any other strategy specific values), and         return the ID of the recipient.\"}},\"notice\":\"BaseStrategy is the base contract that all strategies should inherit from and uses this interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol\":\"IStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol\":{\"keccak256\":\"0xe1ccd35e03787b4a5beb138c336f5fc617f4885726bfdf3c82a642499e21f785\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7369418f7c7a3a16c38ed506ceb4e873f0806e6d68db2f682fa46b0e6070a74a\",\"dweb:/ipfs/Qmc4MiHqKdPdd7H7me8h5LsjHMt7KgAdUg5phGUTHMVsdc\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x3a2edcea094551fc86612932d42bd6b4682d20fb7b46cfdbeee39ba85367749f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c922d497fdfdd2f43a009959429c761d1fb61501ca5d91abf9ae873ac58d437e\",\"dweb:/ipfs/QmaiUx4uVajytmFJQJdGh2mJK2RKn4xNVrARurJdF3iwzA\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0xebd143a6729d7fe650ffd83a2dc1941e19ce9285526e5cb4d6c32adba3f3cf23\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://994ed7ab48860e92ffd369e6741149760a725c5ddf4fc55e33c31f408bd25487\",\"dweb:/ipfs/QmV6bzxJQo5T13Kynv7mqGJQSbNyZ4ZJfTEjWUymxmpfpH\"]},\"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol\":{\"keccak256\":\"0x96444e1b6b4adf69d76debd36a792d618e50a7902248ed84b6f07ccdab946893\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://eee957068fb48e486d8186d61e8a002a85a0e0004763c88ba03552afb47f3bf5\",\"dweb:/ipfs/QmWawMnwBMj8tyUoL6RMJtXbeSZUqLUN7iFieQqgUnFYro\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Allocated(address,uint256,address,address)": {
								"notice": "Emitted when a recipient is allocated to."
							},
							"Distributed(address,address,uint256,address)": {
								"notice": "Emitted when tokens are distributed."
							},
							"Initialized(uint256,bytes)": {
								"notice": "Emitted when strategy is initialized."
							},
							"PoolActive(bool)": {
								"notice": "Emitted when pool is set to active status."
							},
							"Registered(address,bytes,address)": {
								"notice": "Emitted when a recipient is registered."
							}
						},
						"kind": "user",
						"methods": {
							"allocate(bytes,address)": {
								"notice": "This will allocate to a recipient."
							},
							"distribute(address[],bytes,address)": {
								"notice": "This will distribute funds (tokens) to recipients."
							},
							"getAllo()": {
								"notice": "Getter for the address of the Allo contract."
							},
							"getPayouts(address[],bytes[])": {
								"notice": "Checks the amount allocated to a recipient for distribution."
							},
							"getPoolAmount()": {
								"notice": "Checks the amount of tokens in the pool."
							},
							"getPoolId()": {
								"notice": "Getter for the 'poolId' for this strategy."
							},
							"getRecipientStatus(address)": {
								"notice": "Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those      since there is no need for Pending or Rejected."
							},
							"getStrategyId()": {
								"notice": "Getter for the 'id' of the strategy."
							},
							"increasePoolAmount(uint256)": {
								"notice": "Increases the balance of the pool."
							},
							"initialize(uint256,bytes)": {
								"notice": "@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize()."
							},
							"isPoolActive()": {
								"notice": "whether pool is active."
							},
							"isValidAllocator(address)": {
								"notice": "Checks whether a allocator is valid or not, will usually be true for all strategies      and will depend on the strategy implementation."
							},
							"registerRecipient(bytes,address)": {
								"notice": "This will register a recipient, set their status (and any other strategy specific values), and         return the ID of the recipient."
							}
						},
						"notice": "BaseStrategy is the base contract that all strategies should inherit from and uses this interface.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/core/MBaseStrategy.sol": {
				"ast": {
					"absolutePath": "contracts/core/MBaseStrategy.sol",
					"exportedSymbols": {
						"IAllo": [
							945
						],
						"IStrategy": [
							1307
						],
						"MBaseStrategy": [
							608
						]
					},
					"id": 609,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".23"
							],
							"nodeType": "PragmaDirective",
							"src": "43:24:0"
						},
						{
							"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol",
							"file": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 609,
							"sourceUnit": 1308,
							"src": "86:100:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "IStrategy",
										"nameLocations": [
											"4561:9:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1307,
										"src": "4561:9:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "4561:9:0"
								}
							],
							"canonicalName": "MBaseStrategy",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "4198:328:0",
								"text": "@title BaseStrategy Contract\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice This contract is the base contract for all strategies\n @dev This contract is implemented by all strategies."
							},
							"fullyImplemented": false,
							"id": 608,
							"linearizedBaseContracts": [
								608,
								1307
							],
							"name": "MBaseStrategy",
							"nameLocation": "4544:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "4578:102:0",
										"text": "==========================\n === Storage Variables ====\n =========================="
									},
									"id": 9,
									"mutability": "constant",
									"name": "NATIVE",
									"nameLocation": "4703:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 608,
									"src": "4686:68:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "4686:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307845656565654565656545654565654565456545656545454565656565456565656565656545456545",
										"id": 8,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "4712:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 12,
									"mutability": "immutable",
									"name": "allo",
									"nameLocation": "4788:4:0",
									"nodeType": "VariableDeclaration",
									"scope": 608,
									"src": "4763:29:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IAllo_$945",
										"typeString": "contract IAllo"
									},
									"typeName": {
										"id": 11,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 10,
											"name": "IAllo",
											"nameLocations": [
												"4763:5:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 945,
											"src": "4763:5:0"
										},
										"referencedDeclaration": 945,
										"src": "4763:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IAllo_$945",
											"typeString": "contract IAllo"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 14,
									"mutability": "immutable",
									"name": "strategyId",
									"nameLocation": "4826:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 608,
									"src": "4799:37:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 13,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "4799:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 16,
									"mutability": "mutable",
									"name": "poolActive",
									"nameLocation": "4857:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 608,
									"src": "4843:24:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 15,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "4843:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 18,
									"mutability": "mutable",
									"name": "poolId",
									"nameLocation": "4891:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 608,
									"src": "4874:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 17,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "4874:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 20,
									"mutability": "mutable",
									"name": "poolAmount",
									"nameLocation": "4921:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 608,
									"src": "4904:27:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 19,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "4904:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "5295:90:0",
										"statements": [
											{
												"expression": {
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 28,
														"name": "allo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 12,
														"src": "5306:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAllo_$945",
															"typeString": "contract IAllo"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 30,
																"name": "_allo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 23,
																"src": "5319:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 29,
															"name": "IAllo",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 945,
															"src": "5313:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IAllo_$945_$",
																"typeString": "type(contract IAllo)"
															}
														},
														"id": 31,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5313:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAllo_$945",
															"typeString": "contract IAllo"
														}
													},
													"src": "5306:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAllo_$945",
														"typeString": "contract IAllo"
													}
												},
												"id": 33,
												"nodeType": "ExpressionStatement",
												"src": "5306:19:0"
											},
											{
												"expression": {
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 34,
														"name": "strategyId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "5336:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 38,
																		"name": "_name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 25,
																		"src": "5370:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 36,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5359:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 37,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "5363:6:0",
																	"memberName": "encode",
																	"nodeType": "MemberAccess",
																	"src": "5359:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5359:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 35,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "5349:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 40,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5349:28:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "5336:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "5336:41:0"
											}
										]
									},
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "5080:161:0",
										"text": "@notice Constructor to set the Allo contract and \"strategyId'.\n @param _allo Address of the Allo contract.\n @param _name Name of the strategy"
									},
									"id": 44,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "_allo",
												"nameLocation": "5267:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "5259:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5259:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "_name",
												"nameLocation": "5288:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "5274:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 24,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5274:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5258:36:0"
									},
									"returnParameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5295:0:0"
									},
									"scope": 608,
									"src": "5247:138:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 51,
										"nodeType": "Block",
										"src": "5698:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 47,
														"name": "_checkOnlyAllo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "5709:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5709:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "5709:16:0"
											},
											{
												"id": 50,
												"nodeType": "PlaceholderStatement",
												"src": "5736:1:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "5533:139:0",
										"text": "@notice Modifier to check if the 'msg.sender' is the Allo contract.\n @dev Reverts if the 'msg.sender' is not the Allo contract."
									},
									"id": 52,
									"name": "onlyAllo",
									"nameLocation": "5687:8:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5695:2:0"
									},
									"src": "5678:67:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 62,
										"nodeType": "Block",
										"src": "6000:61:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 58,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "6033:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 57,
														"name": "_checkOnlyPoolManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "6011:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$__$",
															"typeString": "function (address) view"
														}
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6011:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "6011:30:0"
											},
											{
												"id": 61,
												"nodeType": "PlaceholderStatement",
												"src": "6052:1:0"
											}
										]
									},
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "5753:199:0",
										"text": "@notice Modifier to check if the '_sender' is a pool manager.\n @dev Reverts if the '_sender' is not a pool manager.\n @param _sender The address to check if they are a pool manager"
									},
									"id": 63,
									"name": "onlyPoolManager",
									"nameLocation": "5967:15:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "5991:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "5983:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5983:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5982:17:0"
									},
									"src": "5958:103:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 70,
										"nodeType": "Block",
										"src": "6202:53:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 66,
														"name": "_checkOnlyActivePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 428,
														"src": "6213:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 67,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6213:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 68,
												"nodeType": "ExpressionStatement",
												"src": "6213:22:0"
											},
											{
												"id": 69,
												"nodeType": "PlaceholderStatement",
												"src": "6246:1:0"
											}
										]
									},
									"documentation": {
										"id": 64,
										"nodeType": "StructuredDocumentation",
										"src": "6069:101:0",
										"text": "@notice Modifier to check if the pool is active.\n @dev Reverts if the pool is not active."
									},
									"id": 71,
									"name": "onlyActivePool",
									"nameLocation": "6185:14:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6199:2:0"
									},
									"src": "6176:79:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 78,
										"nodeType": "Block",
										"src": "6396:51:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 74,
														"name": "_checkInactivePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 439,
														"src": "6407:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6407:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 76,
												"nodeType": "ExpressionStatement",
												"src": "6407:20:0"
											},
											{
												"id": 77,
												"nodeType": "PlaceholderStatement",
												"src": "6438:1:0"
											}
										]
									},
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "6263:99:0",
										"text": "@notice Modifier to check if the pool is inactive.\n @dev Reverts if the pool is active."
									},
									"id": 79,
									"name": "onlyInactivePool",
									"nameLocation": "6377:16:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6393:2:0"
									},
									"src": "6368:79:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 86,
										"nodeType": "Block",
										"src": "6599:54:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 82,
														"name": "_checkOnlyInitialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 452,
														"src": "6610:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 83,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6610:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 84,
												"nodeType": "ExpressionStatement",
												"src": "6610:23:0"
											},
											{
												"id": 85,
												"nodeType": "PlaceholderStatement",
												"src": "6644:1:0"
											}
										]
									},
									"documentation": {
										"id": 80,
										"nodeType": "StructuredDocumentation",
										"src": "6455:111:0",
										"text": "@notice Modifier to check if the pool is initialized.\n @dev Reverts if the pool is not initialized."
									},
									"id": 87,
									"name": "onlyInitialized",
									"nameLocation": "6581:15:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6596:2:0"
									},
									"src": "6572:81:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1208
									],
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "6931:30:0",
										"statements": [
											{
												"expression": {
													"id": 95,
													"name": "allo",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 12,
													"src": "6949:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAllo_$945",
														"typeString": "contract IAllo"
													}
												},
												"functionReturnParameters": 94,
												"id": 96,
												"nodeType": "Return",
												"src": "6942:11:0"
											}
										]
									},
									"documentation": {
										"id": 88,
										"nodeType": "StructuredDocumentation",
										"src": "6789:78:0",
										"text": "@notice Getter for the 'Allo' contract.\n @return The Allo contract"
									},
									"functionSelector": "15cc481e",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllo",
									"nameLocation": "6882:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 90,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6906:8:0"
									},
									"parameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6889:2:0"
									},
									"returnParameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "6924:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAllo_$945",
													"typeString": "contract IAllo"
												},
												"typeName": {
													"id": 92,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 91,
														"name": "IAllo",
														"nameLocations": [
															"6924:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 945,
														"src": "6924:5:0"
													},
													"referencedDeclaration": 945,
													"src": "6924:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAllo_$945",
														"typeString": "contract IAllo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6923:7:0"
									},
									"scope": 608,
									"src": "6873:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1214
									],
									"body": {
										"id": 107,
										"nodeType": "Block",
										"src": "7109:32:0",
										"statements": [
											{
												"expression": {
													"id": 105,
													"name": "poolId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 18,
													"src": "7127:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 104,
												"id": 106,
												"nodeType": "Return",
												"src": "7120:13:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "6969:72:0",
										"text": "@notice Getter for the 'poolId'.\n @return The ID of the pool"
									},
									"functionSelector": "38fff2d0",
									"id": 108,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolId",
									"nameLocation": "7056:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 101,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7082:8:0"
									},
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7065:2:0"
									},
									"returnParameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 108,
												"src": "7100:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7100:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7099:9:0"
									},
									"scope": 608,
									"src": "7047:94:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1220
									],
									"body": {
										"id": 117,
										"nodeType": "Block",
										"src": "7301:36:0",
										"statements": [
											{
												"expression": {
													"id": 115,
													"name": "strategyId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 14,
													"src": "7319:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 114,
												"id": 116,
												"nodeType": "Return",
												"src": "7312:17:0"
											}
										]
									},
									"documentation": {
										"id": 109,
										"nodeType": "StructuredDocumentation",
										"src": "7149:80:0",
										"text": "@notice Getter for the 'strategyId'.\n @return The ID of the strategy"
									},
									"functionSelector": "42fda9c7",
									"id": 118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStrategyId",
									"nameLocation": "7244:13:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 111,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7274:8:0"
									},
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7257:2:0"
									},
									"returnParameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "7292:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 112,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7292:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7291:9:0"
									},
									"scope": 608,
									"src": "7235:102:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1240
									],
									"body": {
										"id": 127,
										"nodeType": "Block",
										"src": "7506:36:0",
										"statements": [
											{
												"expression": {
													"id": 125,
													"name": "poolAmount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 20,
													"src": "7524:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 124,
												"id": 126,
												"nodeType": "Return",
												"src": "7517:17:0"
											}
										]
									},
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "7345:81:0",
										"text": "@notice Getter for the 'poolAmount'.\n @return The balance of the pool"
									},
									"functionSelector": "4ab4ba42",
									"id": 128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolAmount",
									"nameLocation": "7441:13:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 121,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7479:8:0"
									},
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7454:2:0"
									},
									"returnParameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "7497:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7497:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7496:9:0"
									},
									"scope": 608,
									"src": "7432:110:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1234
									],
									"body": {
										"id": 138,
										"nodeType": "Block",
										"src": "7740:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 135,
														"name": "_isPoolActive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 476,
														"src": "7758:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7758:15:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 134,
												"id": 137,
												"nodeType": "Return",
												"src": "7751:22:0"
											}
										]
									},
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "7550:122:0",
										"text": "@notice Getter for whether or not the pool is active.\n @return 'true' if the pool is active, otherwise 'false'"
									},
									"functionSelector": "df868ed3",
									"id": 139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolActive",
									"nameLocation": "7687:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 131,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7716:8:0"
									},
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7699:2:0"
									},
									"returnParameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "7734:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 132,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7734:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7733:6:0"
									},
									"scope": 608,
									"src": "7678:103:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1255
									],
									"body": {
										"id": 152,
										"nodeType": "Block",
										"src": "8031:59:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 149,
															"name": "_recipientId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 142,
															"src": "8069:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 148,
														"name": "_getRecipientStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 533,
														"src": "8049:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_enum$_Status_$1152_$",
															"typeString": "function (address) view returns (enum IStrategy.Status)"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8049:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$1152",
														"typeString": "enum IStrategy.Status"
													}
												},
												"functionReturnParameters": 147,
												"id": 151,
												"nodeType": "Return",
												"src": "8042:40:0"
											}
										]
									},
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "7789:147:0",
										"text": "@notice Getter for the status of a recipient.\n @param _recipientId The ID of the recipient\n @return The status of the recipient"
									},
									"functionSelector": "eb11af93",
									"id": 153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRecipientStatus",
									"nameLocation": "7951:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "7978:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "7970:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7970:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7969:22:0"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "8023:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$1152",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 145,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 144,
														"name": "Status",
														"nameLocations": [
															"8023:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1152,
														"src": "8023:6:0"
													},
													"referencedDeclaration": 1152,
													"src": "8023:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$1152",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8022:8:0"
									},
									"scope": 608,
									"src": "7942:148:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "8471:288:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 161,
														"name": "poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "8560:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 162,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8570:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8560:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 168,
												"nodeType": "IfStatement",
												"src": "8556:46:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"hexValue": "414c524541445920494e495449414c495a4544",
																"id": 165,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8580:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_e1b8a905832292be113e59383f7d405b841482915799df05034d0acfef0942b8",
																	"typeString": "literal_string \"ALREADY INITIALIZED\""
																},
																"value": "ALREADY INITIALIZED"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_e1b8a905832292be113e59383f7d405b841482915799df05034d0acfef0942b8",
																	"typeString": "literal_string \"ALREADY INITIALIZED\""
																}
															],
															"id": 164,
															"name": "revert",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967277,
																4294967277
															],
															"referencedDeclaration": 4294967277,
															"src": "8573:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																"typeString": "function (string memory) pure"
															}
														},
														"id": 166,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8573:29:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 167,
													"nodeType": "ExpressionStatement",
													"src": "8573:29:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 169,
														"name": "_poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 156,
														"src": "8693:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 170,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8704:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8693:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 176,
												"nodeType": "IfStatement",
												"src": "8689:35:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"hexValue": "494e56414c4944",
																"id": 173,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8714:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_05681e4e5ed3f758209aaff7c67ddc15f7304807a989db2335478a8c28a86879",
																	"typeString": "literal_string \"INVALID\""
																},
																"value": "INVALID"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_05681e4e5ed3f758209aaff7c67ddc15f7304807a989db2335478a8c28a86879",
																	"typeString": "literal_string \"INVALID\""
																}
															],
															"id": 172,
															"name": "revert",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967277,
																4294967277
															],
															"referencedDeclaration": 4294967277,
															"src": "8707:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																"typeString": "function (string memory) pure"
															}
														},
														"id": 174,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8707:17:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 175,
													"nodeType": "ExpressionStatement",
													"src": "8707:17:0"
												}
											},
											{
												"expression": {
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 177,
														"name": "poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "8735:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 178,
														"name": "_poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 156,
														"src": "8744:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8735:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 180,
												"nodeType": "ExpressionStatement",
												"src": "8735:16:0"
											}
										]
									},
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "8238:155:0",
										"text": "@notice Initializes the 'Basetrategy'.\n @dev Will revert if the poolId is invalid or already initialized\n @param _poolId ID of the pool"
									},
									"id": 182,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 159,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 158,
												"name": "onlyAllo",
												"nameLocations": [
													"8462:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 52,
												"src": "8462:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "8462:8:0"
										}
									],
									"name": "__BaseStrategy_init",
									"nameLocation": "8408:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "8436:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "8428:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8428:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8427:17:0"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8471:0:0"
									},
									"scope": 608,
									"src": "8399:360:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1246
									],
									"body": {
										"id": 203,
										"nodeType": "Block",
										"src": "9033:129:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 192,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "9070:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 191,
														"name": "_beforeIncreasePoolAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "9044:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9044:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 194,
												"nodeType": "ExpressionStatement",
												"src": "9044:34:0"
											},
											{
												"expression": {
													"id": 197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 195,
														"name": "poolAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "9089:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 196,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 185,
														"src": "9103:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9089:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 198,
												"nodeType": "ExpressionStatement",
												"src": "9089:21:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 200,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "9146:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 199,
														"name": "_afterIncreasePoolAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 547,
														"src": "9121:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9121:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 202,
												"nodeType": "ExpressionStatement",
												"src": "9121:33:0"
											}
										]
									},
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "8767:188:0",
										"text": "@notice Increases the pool amount.\n @dev Increases the 'poolAmount' by '_amount'. Only 'Allo' contract can call this.\n @param _amount The amount to increase the pool by"
									},
									"functionSelector": "f5b0dfb7",
									"id": 204,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 189,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 188,
												"name": "onlyAllo",
												"nameLocations": [
													"9024:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 52,
												"src": "9024:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "9024:8:0"
										}
									],
									"name": "increasePoolAmount",
									"nameLocation": "8970:18:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 187,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9015:8:0"
									},
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "8997:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "8989:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8989:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8988:17:0"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9033:0:0"
									},
									"scope": 608,
									"src": "8961:201:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1287
									],
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "9772:168:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 219,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 207,
															"src": "9808:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 220,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 209,
															"src": "9815:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 218,
														"name": "_beforeRegisterRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 556,
														"src": "9783:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9783:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 222,
												"nodeType": "ExpressionStatement",
												"src": "9783:40:0"
											},
											{
												"expression": {
													"id": 228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 223,
														"name": "recipientId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 216,
														"src": "9834:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 225,
																"name": "_data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 207,
																"src": "9867:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															{
																"id": 226,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 209,
																"src": "9874:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 224,
															"name": "_registerRecipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "9848:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$_t_address_$",
																"typeString": "function (bytes memory,address) returns (address)"
															}
														},
														"id": 227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9848:34:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9834:48:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 229,
												"nodeType": "ExpressionStatement",
												"src": "9834:48:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 231,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 207,
															"src": "9917:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 232,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 209,
															"src": "9924:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 230,
														"name": "_afterRegisterRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 565,
														"src": "9893:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9893:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 234,
												"nodeType": "ExpressionStatement",
												"src": "9893:39:0"
											}
										]
									},
									"documentation": {
										"id": 205,
										"nodeType": "StructuredDocumentation",
										"src": "9170:410:0",
										"text": "@notice Registers a recipient.\n @dev Registers a recipient and returns the ID of the recipient. The encoded '_data' will be determined by the\n      strategy implementation. Only 'Allo' contract can call this when it is initialized.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender\n @return recipientId The recipientId"
									},
									"functionSelector": "2bbe0cae",
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 212,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 211,
												"name": "onlyAllo",
												"nameLocations": [
													"9694:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 52,
												"src": "9694:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "9694:8:0"
										},
										{
											"id": 214,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 213,
												"name": "onlyInitialized",
												"nameLocations": [
													"9712:15:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 87,
												"src": "9712:15:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "9712:15:0"
										}
									],
									"name": "registerRecipient",
									"nameLocation": "9595:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "9626:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "9613:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 206,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9613:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "9641:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "9633:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9633:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9612:37:0"
									},
									"returnParameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "9754:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "9746:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9746:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9745:21:0"
									},
									"scope": 608,
									"src": "9586:354:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1295
									],
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "10363:127:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 249,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "10390:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 250,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "10397:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 248,
														"name": "_beforeAllocate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "10374:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10374:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 252,
												"nodeType": "ExpressionStatement",
												"src": "10374:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 254,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "10426:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 255,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "10433:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 253,
														"name": "_allocate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 502,
														"src": "10416:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10416:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "10416:25:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 259,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "10467:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 260,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "10474:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 258,
														"name": "_afterAllocate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 583,
														"src": "10452:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (bytes memory,address)"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10452:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 262,
												"nodeType": "ExpressionStatement",
												"src": "10452:30:0"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "9948:312:0",
										"text": "@notice Allocates to a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\n      call this when it is initialized.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"functionSelector": "ef2920fc",
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 244,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 243,
												"name": "onlyAllo",
												"nameLocations": [
													"10338:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 52,
												"src": "10338:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "10338:8:0"
										},
										{
											"id": 246,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 245,
												"name": "onlyInitialized",
												"nameLocations": [
													"10347:15:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 87,
												"src": "10347:15:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "10347:15:0"
										}
									],
									"name": "allocate",
									"nameLocation": "10275:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10297:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "10284:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 238,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10284:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "10312:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "10304:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10304:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10283:37:0"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10363:0:0"
									},
									"scope": 608,
									"src": "10266:224:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1306
									],
									"body": {
										"id": 297,
										"nodeType": "Block",
										"src": "11046:178:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 280,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "11075:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 281,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "11090:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 282,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "11097:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 279,
														"name": "_beforeDistribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 595,
														"src": "11057:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (address[] memory,bytes memory,address)"
														}
													},
													"id": 283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11057:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 284,
												"nodeType": "ExpressionStatement",
												"src": "11057:48:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 286,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "11128:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 287,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "11143:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 288,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "11150:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 285,
														"name": "_distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "11116:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (address[] memory,bytes memory,address)"
														}
													},
													"id": 289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11116:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 290,
												"nodeType": "ExpressionStatement",
												"src": "11116:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 292,
															"name": "_recipientIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "11186:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 293,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "11201:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 294,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "11208:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 291,
														"name": "_afterDistribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 607,
														"src": "11169:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (address[] memory,bytes memory,address)"
														}
													},
													"id": 295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11169:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 296,
												"nodeType": "ExpressionStatement",
												"src": "11169:47:0"
											}
										]
									},
									"documentation": {
										"id": 265,
										"nodeType": "StructuredDocumentation",
										"src": "10498:387:0",
										"text": "@notice Distributes funds (tokens) to recipients.\n @dev The encoded '_data' will be determined by the strategy implementation. Only 'Allo' contract can\n      call this when it is initialized.\n @param _recipientIds The IDs of the recipients\n @param _data The data to use to distribute to the recipients\n @param _sender The address of the sender"
									},
									"functionSelector": "0a6f0ee9",
									"id": 298,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 275,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 274,
												"name": "onlyAllo",
												"nameLocations": [
													"11007:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 52,
												"src": "11007:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "11007:8:0"
										},
										{
											"id": 277,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 276,
												"name": "onlyInitialized",
												"nameLocations": [
													"11025:15:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 87,
												"src": "11025:15:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "11025:15:0"
										}
									],
									"name": "distribute",
									"nameLocation": "10900:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "10928:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "10911:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 266,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10911:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 267,
													"nodeType": "ArrayTypeName",
													"src": "10911:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10956:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "10943:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 269,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10943:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "10971:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "10963:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10963:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10910:69:0"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11046:0:0"
									},
									"scope": 608,
									"src": "10891:333:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1269
									],
									"body": {
										"id": 366,
										"nodeType": "Block",
										"src": "11756:536:0",
										"statements": [
											{
												"assignments": [
													314
												],
												"declarations": [
													{
														"constant": false,
														"id": 314,
														"mutability": "mutable",
														"name": "recipientLength",
														"nameLocation": "11775:15:0",
														"nodeType": "VariableDeclaration",
														"scope": 366,
														"src": "11767:23:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 313,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11767:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 317,
												"initialValue": {
													"expression": {
														"id": 315,
														"name": "_recipientIds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 302,
														"src": "11793:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "11807:6:0",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "11793:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11767:46:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 318,
														"name": "recipientLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 314,
														"src": "11932:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 319,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "11951:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																"typeString": "bytes memory[] memory"
															}
														},
														"id": 320,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11957:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "11951:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11932:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 326,
												"nodeType": "IfStatement",
												"src": "11928:61:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"hexValue": "4152524159204d49534d41544348",
																"id": 323,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11972:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_061c27735e8d4de427c1d79927697f5893e7c1ed55f494a77889279330b06ae6",
																	"typeString": "literal_string \"ARRAY MISMATCH\""
																},
																"value": "ARRAY MISMATCH"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_061c27735e8d4de427c1d79927697f5893e7c1ed55f494a77889279330b06ae6",
																	"typeString": "literal_string \"ARRAY MISMATCH\""
																}
															],
															"id": 322,
															"name": "revert",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967277,
																4294967277
															],
															"referencedDeclaration": 4294967277,
															"src": "11965:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																"typeString": "function (string memory) pure"
															}
														},
														"id": 324,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11965:24:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 325,
													"nodeType": "ExpressionStatement",
													"src": "11965:24:0"
												}
											},
											{
												"assignments": [
													331
												],
												"declarations": [
													{
														"constant": false,
														"id": 331,
														"mutability": "mutable",
														"name": "payouts",
														"nameLocation": "12025:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 366,
														"src": "12002:30:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_memory_ptr_$dyn_memory_ptr",
															"typeString": "struct IStrategy.PayoutSummary[]"
														},
														"typeName": {
															"baseType": {
																"id": 329,
																"nodeType": "UserDefinedTypeName",
																"pathNode": {
																	"id": 328,
																	"name": "PayoutSummary",
																	"nameLocations": [
																		"12002:13:0"
																	],
																	"nodeType": "IdentifierPath",
																	"referencedDeclaration": 1158,
																	"src": "12002:13:0"
																},
																"referencedDeclaration": 1158,
																"src": "12002:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PayoutSummary_$1158_storage_ptr",
																	"typeString": "struct IStrategy.PayoutSummary"
																}
															},
															"id": 330,
															"nodeType": "ArrayTypeName",
															"src": "12002:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_storage_$dyn_storage_ptr",
																"typeString": "struct IStrategy.PayoutSummary[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 338,
												"initialValue": {
													"arguments": [
														{
															"id": 336,
															"name": "recipientLength",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 314,
															"src": "12055:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 335,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "12035:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_PayoutSummary_$1158_memory_ptr_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (struct IStrategy.PayoutSummary memory[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 333,
																"nodeType": "UserDefinedTypeName",
																"pathNode": {
																	"id": 332,
																	"name": "PayoutSummary",
																	"nameLocations": [
																		"12039:13:0"
																	],
																	"nodeType": "IdentifierPath",
																	"referencedDeclaration": 1158,
																	"src": "12039:13:0"
																},
																"referencedDeclaration": 1158,
																"src": "12039:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PayoutSummary_$1158_storage_ptr",
																	"typeString": "struct IStrategy.PayoutSummary"
																}
															},
															"id": 334,
															"nodeType": "ArrayTypeName",
															"src": "12039:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_storage_$dyn_storage_ptr",
																"typeString": "struct IStrategy.PayoutSummary[]"
															}
														}
													},
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12035:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_memory_ptr_$dyn_memory_ptr",
														"typeString": "struct IStrategy.PayoutSummary memory[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12002:69:0"
											},
											{
												"body": {
													"id": 362,
													"nodeType": "Block",
													"src": "12120:140:0",
													"statements": [
														{
															"expression": {
																"id": 356,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 345,
																		"name": "payouts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 331,
																		"src": "12135:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_memory_ptr_$dyn_memory_ptr",
																			"typeString": "struct IStrategy.PayoutSummary memory[] memory"
																		}
																	},
																	"id": 347,
																	"indexExpression": {
																		"id": 346,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 340,
																		"src": "12143:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "12135:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PayoutSummary_$1158_memory_ptr",
																		"typeString": "struct IStrategy.PayoutSummary memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"baseExpression": {
																				"id": 349,
																				"name": "_recipientIds",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 302,
																				"src": "12159:13:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																					"typeString": "address[] memory"
																				}
																			},
																			"id": 351,
																			"indexExpression": {
																				"id": 350,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 340,
																				"src": "12173:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "12159:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 352,
																				"name": "_data",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 305,
																				"src": "12177:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																					"typeString": "bytes memory[] memory"
																				}
																			},
																			"id": 354,
																			"indexExpression": {
																				"id": 353,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 340,
																				"src": "12183:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "12177:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 348,
																		"name": "_getPayout",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 524,
																		"src": "12148:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$returns$_t_struct$_PayoutSummary_$1158_memory_ptr_$",
																			"typeString": "function (address,bytes memory) view returns (struct IStrategy.PayoutSummary memory)"
																		}
																	},
																	"id": 355,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "12148:38:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PayoutSummary_$1158_memory_ptr",
																		"typeString": "struct IStrategy.PayoutSummary memory"
																	}
																},
																"src": "12135:51:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PayoutSummary_$1158_memory_ptr",
																	"typeString": "struct IStrategy.PayoutSummary memory"
																}
															},
															"id": 357,
															"nodeType": "ExpressionStatement",
															"src": "12135:51:0"
														},
														{
															"id": 361,
															"nodeType": "UncheckedBlock",
															"src": "12201:48:0",
															"statements": [
																{
																	"expression": {
																		"id": 359,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "12230:3:0",
																		"subExpression": {
																			"id": 358,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 340,
																			"src": "12230:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 360,
																	"nodeType": "ExpressionStatement",
																	"src": "12230:3:0"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 342,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 340,
														"src": "12098:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 343,
														"name": "recipientLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 314,
														"src": "12102:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12098:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 363,
												"initializationExpression": {
													"assignments": [
														340
													],
													"declarations": [
														{
															"constant": false,
															"id": 340,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "12095:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 363,
															"src": "12087:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 339,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12087:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 341,
													"nodeType": "VariableDeclarationStatement",
													"src": "12087:9:0"
												},
												"isSimpleCounterLoop": false,
												"nodeType": "ForStatement",
												"src": "12082:178:0"
											},
											{
												"expression": {
													"id": 364,
													"name": "payouts",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 331,
													"src": "12277:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_memory_ptr_$dyn_memory_ptr",
														"typeString": "struct IStrategy.PayoutSummary memory[] memory"
													}
												},
												"functionReturnParameters": 312,
												"id": 365,
												"nodeType": "Return",
												"src": "12270:14:0"
											}
										]
									},
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "11232:330:0",
										"text": "@notice Gets the payout summary for recipients.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _recipientIds The IDs of the recipients\n @param _data The data to use to get the payout summary for the recipients\n @return The payout summary for the recipients"
									},
									"functionSelector": "b2b878d0",
									"id": 367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPayouts",
									"nameLocation": "11577:10:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 307,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "11700:8:0"
									},
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "11605:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "11588:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 300,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11588:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 301,
													"nodeType": "ArrayTypeName",
													"src": "11588:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "11635:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "11620:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 303,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "11620:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 304,
													"nodeType": "ArrayTypeName",
													"src": "11620:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11587:54:0"
									},
									"returnParameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "11727:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IStrategy.PayoutSummary[]"
												},
												"typeName": {
													"baseType": {
														"id": 309,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 308,
															"name": "PayoutSummary",
															"nameLocations": [
																"11727:13:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1158,
															"src": "11727:13:0"
														},
														"referencedDeclaration": 1158,
														"src": "11727:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PayoutSummary_$1158_storage_ptr",
															"typeString": "struct IStrategy.PayoutSummary"
														}
													},
													"id": 310,
													"nodeType": "ArrayTypeName",
													"src": "11727:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_storage_$dyn_storage_ptr",
														"typeString": "struct IStrategy.PayoutSummary[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11726:24:0"
									},
									"scope": 608,
									"src": "11568:724:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1228
									],
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "12714:55:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 377,
															"name": "_allocator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 370,
															"src": "12750:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 376,
														"name": "_isValidAllocator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "12732:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12732:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 375,
												"id": 379,
												"nodeType": "Return",
												"src": "12725:36:0"
											}
										]
									},
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "12300:316:0",
										"text": "@notice Checks if the '_allocator' is a valid allocator.\n @dev How the allocator is determined is up to the strategy implementation.\n @param _allocator The address to check if it is a valid allocator for the strategy.\n @return 'true' if the address is a valid allocator, 'false' otherwise"
									},
									"functionSelector": "4d31d087",
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isValidAllocator",
									"nameLocation": "12631:16:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 372,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "12690:8:0"
									},
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "_allocator",
												"nameLocation": "12656:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "12648:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12648:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12647:20:0"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "12708:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 373,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12708:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12707:6:0"
									},
									"scope": 608,
									"src": "12622:147:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 397,
										"nodeType": "Block",
										"src": "13091:74:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 385,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "13106:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 386,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "13110:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "13106:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"id": 389,
																"name": "allo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 12,
																"src": "13128:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IAllo_$945",
																	"typeString": "contract IAllo"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IAllo_$945",
																	"typeString": "contract IAllo"
																}
															],
															"id": 388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "13120:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 387,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "13120:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 390,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13120:13:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13106:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 396,
												"nodeType": "IfStatement",
												"src": "13102:55:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"hexValue": "554e415554484f52495a4544",
																"id": 393,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13142:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528",
																	"typeString": "literal_string \"UNAUTHORIZED\""
																},
																"value": "UNAUTHORIZED"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528",
																	"typeString": "literal_string \"UNAUTHORIZED\""
																}
															],
															"id": 392,
															"name": "revert",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967277,
																4294967277
															],
															"referencedDeclaration": 4294967277,
															"src": "13135:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																"typeString": "function (string memory) pure"
															}
														},
														"id": 394,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13135:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 395,
													"nodeType": "ExpressionStatement",
													"src": "13135:22:0"
												}
											}
										]
									},
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "12917:128:0",
										"text": "@notice Checks if the 'msg.sender' is the Allo contract.\n @dev Reverts if the 'msg.sender' is not the Allo contract."
									},
									"id": 398,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnlyAllo",
									"nameLocation": "13060:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13074:2:0"
									},
									"returnParameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13091:0:0"
									},
									"scope": 608,
									"src": "13051:114:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 415,
										"nodeType": "Block",
										"src": "13429:83:0",
										"statements": [
											{
												"condition": {
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "13444:36:0",
													"subExpression": {
														"arguments": [
															{
																"id": 406,
																"name": "poolId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 18,
																"src": "13464:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 407,
																"name": "_sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 401,
																"src": "13472:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 404,
																"name": "allo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 12,
																"src": "13445:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IAllo_$945",
																	"typeString": "contract IAllo"
																}
															},
															"id": 405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "13450:13:0",
															"memberName": "isPoolManager",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 867,
															"src": "13445:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_uint256_$_t_address_$returns$_t_bool_$",
																"typeString": "function (uint256,address) view external returns (bool)"
															}
														},
														"id": 408,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13445:35:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 414,
												"nodeType": "IfStatement",
												"src": "13440:64:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"hexValue": "554e415554484f52495a4544",
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13489:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528",
																	"typeString": "literal_string \"UNAUTHORIZED\""
																},
																"value": "UNAUTHORIZED"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528",
																	"typeString": "literal_string \"UNAUTHORIZED\""
																}
															],
															"id": 410,
															"name": "revert",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967277,
																4294967277
															],
															"referencedDeclaration": 4294967277,
															"src": "13482:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																"typeString": "function (string memory) pure"
															}
														},
														"id": 412,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13482:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 413,
													"nodeType": "ExpressionStatement",
													"src": "13482:22:0"
												}
											}
										]
									},
									"documentation": {
										"id": 399,
										"nodeType": "StructuredDocumentation",
										"src": "13173:188:0",
										"text": "@notice Checks if the '_sender' is a pool manager.\n @dev Reverts if the '_sender' is not a pool manager.\n @param _sender The address to check if they are a pool manager"
									},
									"id": 416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnlyPoolManager",
									"nameLocation": "13376:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "13406:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "13398:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13398:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13397:17:0"
									},
									"returnParameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13429:0:0"
									},
									"scope": 608,
									"src": "13367:145:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 427,
										"nodeType": "Block",
										"src": "13662:59:0",
										"statements": [
											{
												"condition": {
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "13677:11:0",
													"subExpression": {
														"id": 420,
														"name": "poolActive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "13678:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 426,
												"nodeType": "IfStatement",
												"src": "13673:40:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"hexValue": "504f4f4c20494e414354495645",
																"id": 423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13697:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_2ab3952d416974c0959bfacd940dbd07d19d1909978ecbfc73b066fc4b04bb3d",
																	"typeString": "literal_string \"POOL INACTIVE\""
																},
																"value": "POOL INACTIVE"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_2ab3952d416974c0959bfacd940dbd07d19d1909978ecbfc73b066fc4b04bb3d",
																	"typeString": "literal_string \"POOL INACTIVE\""
																}
															],
															"id": 422,
															"name": "revert",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967277,
																4294967277
															],
															"referencedDeclaration": 4294967277,
															"src": "13690:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																"typeString": "function (string memory) pure"
															}
														},
														"id": 424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13690:23:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 425,
													"nodeType": "ExpressionStatement",
													"src": "13690:23:0"
												}
											}
										]
									},
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "13520:90:0",
										"text": "@notice Checks if the pool is active.\n @dev Reverts if the pool is not active."
									},
									"id": 428,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnlyActivePool",
									"nameLocation": "13625:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13645:2:0"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13662:0:0"
									},
									"scope": 608,
									"src": "13616:105:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 438,
										"nodeType": "Block",
										"src": "13867:58:0",
										"statements": [
											{
												"condition": {
													"id": 432,
													"name": "poolActive",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 16,
													"src": "13882:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 437,
												"nodeType": "IfStatement",
												"src": "13878:39:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"hexValue": "504f4f4c20494e414354495645",
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13901:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_2ab3952d416974c0959bfacd940dbd07d19d1909978ecbfc73b066fc4b04bb3d",
																	"typeString": "literal_string \"POOL INACTIVE\""
																},
																"value": "POOL INACTIVE"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_2ab3952d416974c0959bfacd940dbd07d19d1909978ecbfc73b066fc4b04bb3d",
																	"typeString": "literal_string \"POOL INACTIVE\""
																}
															],
															"id": 433,
															"name": "revert",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967277,
																4294967277
															],
															"referencedDeclaration": 4294967277,
															"src": "13894:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																"typeString": "function (string memory) pure"
															}
														},
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13894:23:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 436,
													"nodeType": "ExpressionStatement",
													"src": "13894:23:0"
												}
											}
										]
									},
									"documentation": {
										"id": 429,
										"nodeType": "StructuredDocumentation",
										"src": "13729:88:0",
										"text": "@notice Checks if the pool is inactive.\n @dev Reverts if the pool is active."
									},
									"id": 439,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInactivePool",
									"nameLocation": "13832:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13850:2:0"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13867:0:0"
									},
									"scope": 608,
									"src": "13823:102:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 451,
										"nodeType": "Block",
										"src": "14086:62:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 443,
														"name": "poolId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "14101:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 444,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14111:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "14101:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 450,
												"nodeType": "IfStatement",
												"src": "14097:42:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"hexValue": "4e4f545f494e495449414c495a4544",
																"id": 447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14121:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_96a721d265006ec8b79a4f231d5b616559a7b3d181d752324c3a3c78630a14a8",
																	"typeString": "literal_string \"NOT_INITIALIZED\""
																},
																"value": "NOT_INITIALIZED"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_96a721d265006ec8b79a4f231d5b616559a7b3d181d752324c3a3c78630a14a8",
																	"typeString": "literal_string \"NOT_INITIALIZED\""
																}
															],
															"id": 446,
															"name": "revert",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967277,
																4294967277
															],
															"referencedDeclaration": 4294967277,
															"src": "14114:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																"typeString": "function (string memory) pure"
															}
														},
														"id": 448,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14114:25:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 449,
													"nodeType": "ExpressionStatement",
													"src": "14114:25:0"
												}
											}
										]
									},
									"documentation": {
										"id": 440,
										"nodeType": "StructuredDocumentation",
										"src": "13933:100:0",
										"text": "@notice Checks if the pool is initialized.\n @dev Reverts if the pool is not initialized."
									},
									"id": 452,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnlyInitialized",
									"nameLocation": "14048:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14069:2:0"
									},
									"returnParameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14086:0:0"
									},
									"scope": 608,
									"src": "14039:109:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 466,
										"nodeType": "Block",
										"src": "14440:74:0",
										"statements": [
											{
												"expression": {
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 458,
														"name": "poolActive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "14451:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 459,
														"name": "_active",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 455,
														"src": "14464:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "14451:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 461,
												"nodeType": "ExpressionStatement",
												"src": "14451:20:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 463,
															"name": "_active",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 455,
															"src": "14498:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 462,
														"name": "PoolActive",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1201,
														"src": "14487:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bool_$returns$__$",
															"typeString": "function (bool)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14487:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 465,
												"nodeType": "EmitStatement",
												"src": "14482:24:0"
											}
										]
									},
									"documentation": {
										"id": 453,
										"nodeType": "StructuredDocumentation",
										"src": "14156:231:0",
										"text": "@notice Set the pool to active or inactive status.\n @dev This will emit a 'PoolActive()' event. Used by the strategy implementation.\n @param _active The status to set, 'true' means active, 'false' means inactive"
									},
									"id": 467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setPoolActive",
									"nameLocation": "14402:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "_active",
												"nameLocation": "14422:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "14417:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14417:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14416:14:0"
									},
									"returnParameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14440:0:0"
									},
									"scope": 608,
									"src": "14393:121:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "14747:36:0",
										"statements": [
											{
												"expression": {
													"id": 473,
													"name": "poolActive",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 16,
													"src": "14765:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 472,
												"id": 474,
												"nodeType": "Return",
												"src": "14758:17:0"
											}
										]
									},
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "14522:157:0",
										"text": "@notice Checks if the pool is active.\n @dev Used by the strategy implementation.\n @return 'true' if the pool is active, otherwise 'false'"
									},
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isPoolActive",
									"nameLocation": "14694:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14707:2:0"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "14741:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 470,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14741:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14740:6:0"
									},
									"scope": 608,
									"src": "14685:98:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 477,
										"nodeType": "StructuredDocumentation",
										"src": "14791:162:0",
										"text": "@notice Checks if the allocator is valid\n @param _allocator The allocator address\n @return 'true' if the allocator is valid, otherwise 'false'"
									},
									"id": 484,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_isValidAllocator",
									"nameLocation": "14968:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "_allocator",
												"nameLocation": "14994:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "14986:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14986:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14985:20:0"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "15037:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 481,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15037:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15036:6:0"
									},
									"scope": 608,
									"src": "14959:84:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "15051:595:0",
										"text": "@notice This will register a recipient, set their status (and any other strategy specific values), and\n         return the ID of the recipient.\n @dev Able to change status all the way up to Accepted, or to Pending and if there are more steps, additional\n      functions should be added to allow the owner to check this. The owner could also check attestations directly\n      and then Accept for instance.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender\n @return The ID of the recipient"
									},
									"id": 494,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_registerRecipient",
									"nameLocation": "15661:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "15693:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "15680:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 486,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15680:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "15708:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "15700:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 488,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15700:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15679:37:0"
									},
									"returnParameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "15743:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 491,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15743:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15742:9:0"
									},
									"scope": 608,
									"src": "15652:100:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 495,
										"nodeType": "StructuredDocumentation",
										"src": "15760:248:0",
										"text": "@notice This will allocate to a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"id": 502,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_allocate",
									"nameLocation": "16023:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "16046:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "16033:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 496,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16033:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "16061:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "16053:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 498,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16053:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16032:37:0"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16086:0:0"
									},
									"scope": 608,
									"src": "16014:73:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 503,
										"nodeType": "StructuredDocumentation",
										"src": "16095:475:0",
										"text": "@notice This will distribute funds (tokens) to recipients.\n @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\n this contract will need to track the amount paid already, so that it doesn't double pay.\n @param _recipientIds The ids of the recipients to distribute to\n @param _data Data required will depend on the strategy implementation\n @param _sender The address of the sender"
									},
									"id": 513,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_distribute",
									"nameLocation": "16585:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "16614:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "16597:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 504,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "16597:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 505,
													"nodeType": "ArrayTypeName",
													"src": "16597:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "16642:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "16629:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 507,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16629:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "16657:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "16649:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16649:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16596:69:0"
									},
									"returnParameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16682:0:0"
									},
									"scope": 608,
									"src": "16576:107:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "16691:335:0",
										"text": "@notice This will get the payout summary for a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _recipientId The ID of the recipient\n @param _data The data to use to get the payout summary for the recipient\n @return The payout summary for the recipient"
									},
									"id": 524,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_getPayout",
									"nameLocation": "17041:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "17060:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "17052:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17052:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "17087:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "17074:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 517,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17074:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17051:42:0"
									},
									"returnParameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "17161:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PayoutSummary_$1158_memory_ptr",
													"typeString": "struct IStrategy.PayoutSummary"
												},
												"typeName": {
													"id": 521,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 520,
														"name": "PayoutSummary",
														"nameLocations": [
															"17161:13:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1158,
														"src": "17161:13:0"
													},
													"referencedDeclaration": 1158,
													"src": "17161:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PayoutSummary_$1158_storage_ptr",
														"typeString": "struct IStrategy.PayoutSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17160:22:0"
									},
									"scope": 608,
									"src": "17032:151:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "17191:150:0",
										"text": "@notice This will get the status of a recipient.\n @param _recipientId The ID of the recipient\n @return The status of the recipient"
									},
									"id": 533,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_getRecipientStatus",
									"nameLocation": "17356:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "17384:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 533,
												"src": "17376:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17376:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17375:22:0"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 533,
												"src": "17429:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$1152",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 530,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 529,
														"name": "Status",
														"nameLocations": [
															"17429:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1152,
														"src": "17429:6:0"
													},
													"referencedDeclaration": 1152,
													"src": "17429:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$1152",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17428:8:0"
									},
									"scope": 608,
									"src": "17347:90:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 539,
										"nodeType": "Block",
										"src": "17774:2:0",
										"statements": []
									},
									"documentation": {
										"id": 534,
										"nodeType": "StructuredDocumentation",
										"src": "17582:117:0",
										"text": "@notice Hook called before increasing the pool amount.\n @param _amount The amount to increase the pool by"
									},
									"id": 540,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeIncreasePoolAmount",
									"nameLocation": "17714:25:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "17748:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "17740:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17740:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17739:17:0"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17774:0:0"
									},
									"scope": 608,
									"src": "17705:71:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 546,
										"nodeType": "Block",
										"src": "17974:2:0",
										"statements": []
									},
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "17784:116:0",
										"text": "@notice Hook called after increasing the pool amount.\n @param _amount The amount to increase the pool by"
									},
									"id": 547,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterIncreasePoolAmount",
									"nameLocation": "17915:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "17948:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "17940:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 542,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17940:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17939:17:0"
									},
									"returnParameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17974:0:0"
									},
									"scope": 608,
									"src": "17906:70:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 555,
										"nodeType": "Block",
										"src": "18247:2:0",
										"statements": []
									},
									"documentation": {
										"id": 548,
										"nodeType": "StructuredDocumentation",
										"src": "17984:169:0",
										"text": "@notice Hook called before registering a recipient.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender"
									},
									"id": 556,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeRegisterRecipient",
									"nameLocation": "18168:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "18206:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "18193:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 549,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18193:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "18221:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "18213:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18213:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18192:37:0"
									},
									"returnParameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18247:0:0"
									},
									"scope": 608,
									"src": "18159:90:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 564,
										"nodeType": "Block",
										"src": "18518:2:0",
										"statements": []
									},
									"documentation": {
										"id": 557,
										"nodeType": "StructuredDocumentation",
										"src": "18257:168:0",
										"text": "@notice Hook called after registering a recipient.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender"
									},
									"id": 565,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterRegisterRecipient",
									"nameLocation": "18440:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "18477:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "18464:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 558,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18464:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "18492:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "18484:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18484:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18463:37:0"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18518:0:0"
									},
									"scope": 608,
									"src": "18431:89:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "18787:2:0",
										"statements": []
									},
									"documentation": {
										"id": 566,
										"nodeType": "StructuredDocumentation",
										"src": "18528:174:0",
										"text": "@notice Hook called before allocating to a recipient.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeAllocate",
									"nameLocation": "18717:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "18746:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "18733:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 567,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18733:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "18761:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "18753:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18732:37:0"
									},
									"returnParameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18787:0:0"
									},
									"scope": 608,
									"src": "18708:81:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 582,
										"nodeType": "Block",
										"src": "19054:2:0",
										"statements": []
									},
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "18797:173:0",
										"text": "@notice Hook called after allocating to a recipient.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"id": 583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterAllocate",
									"nameLocation": "18985:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19013:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "19000:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 576,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19000:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "19028:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "19020:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19020:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18999:37:0"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19054:0:0"
									},
									"scope": 608,
									"src": "18976:80:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 594,
										"nodeType": "Block",
										"src": "19432:2:0",
										"statements": []
									},
									"documentation": {
										"id": 584,
										"nodeType": "StructuredDocumentation",
										"src": "19064:249:0",
										"text": "@notice Hook called before distributing funds (tokens) to recipients.\n @param _recipientIds The IDs of the recipients\n @param _data The data to use to distribute to the recipients\n @param _sender The address of the sender"
									},
									"id": 595,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeDistribute",
									"nameLocation": "19328:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "19363:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "19346:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 585,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "19346:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 586,
													"nodeType": "ArrayTypeName",
													"src": "19346:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19391:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "19378:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 588,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19378:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "19406:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "19398:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19398:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19345:69:0"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19432:0:0"
									},
									"scope": 608,
									"src": "19319:115:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 606,
										"nodeType": "Block",
										"src": "19808:2:0",
										"statements": []
									},
									"documentation": {
										"id": 596,
										"nodeType": "StructuredDocumentation",
										"src": "19442:248:0",
										"text": "@notice Hook called after distributing funds (tokens) to recipients.\n @param _recipientIds The IDs of the recipients\n @param _data The data to use to distribute to the recipients\n @param _sender The address of the sender"
									},
									"id": 607,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterDistribute",
									"nameLocation": "19705:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "19739:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "19722:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 597,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "19722:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 598,
													"nodeType": "ArrayTypeName",
													"src": "19722:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19767:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "19754:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 600,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19754:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "19782:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "19774:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 602,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19774:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19721:69:0"
									},
									"returnParameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19808:0:0"
									},
									"scope": 608,
									"src": "19696:114:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 609,
							"src": "4526:15287:0",
							"usedErrors": [],
							"usedEvents": [
								1165,
								1174,
								1185,
								1196,
								1201
							]
						}
					],
					"src": "43:19770:0"
				},
				"id": 0
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol": {
				"ast": {
					"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol",
					"exportedSymbols": {
						"IAllo": [
							945
						],
						"IRegistry": [
							1138
						],
						"IStrategy": [
							1307
						],
						"Metadata": [
							1317
						]
					},
					"id": 946,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 610,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:24:1"
						},
						{
							"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol",
							"file": "./IRegistry.sol",
							"id": 612,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 946,
							"sourceUnit": 1139,
							"src": "82:42:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 611,
										"name": "IRegistry",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1138,
										"src": "90:9:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol",
							"file": "./IStrategy.sol",
							"id": 614,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 946,
							"sourceUnit": 1308,
							"src": "125:42:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 613,
										"name": "IStrategy",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1307,
										"src": "133:9:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol",
							"file": "../libraries/Metadata.sol",
							"id": 616,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 946,
							"sourceUnit": 1318,
							"src": "190:51:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 615,
										"name": "Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1317,
										"src": "198:8:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAllo",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 617,
								"nodeType": "StructuredDocumentation",
								"src": "4234:297:1",
								"text": "@title Allo Interface\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice Interface for the Allo contract. It exposes all functions needed to use the Allo protocol."
							},
							"fullyImplemented": false,
							"id": 945,
							"linearizedBaseContracts": [
								945
							],
							"name": "IAllo",
							"nameLocation": "4541:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IAllo.Pool",
									"documentation": {
										"id": 618,
										"nodeType": "StructuredDocumentation",
										"src": "4647:66:1",
										"text": "@notice the Pool struct that all strategy pools are based from"
									},
									"id": 633,
									"members": [
										{
											"constant": false,
											"id": 620,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "4748:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 633,
											"src": "4740:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 619,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "4740:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 623,
											"mutability": "mutable",
											"name": "strategy",
											"nameLocation": "4777:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 633,
											"src": "4767:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IStrategy_$1307",
												"typeString": "contract IStrategy"
											},
											"typeName": {
												"id": 622,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 621,
													"name": "IStrategy",
													"nameLocations": [
														"4767:9:1"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1307,
													"src": "4767:9:1"
												},
												"referencedDeclaration": 1307,
												"src": "4767:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IStrategy_$1307",
													"typeString": "contract IStrategy"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 625,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "4803:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 633,
											"src": "4795:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 624,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4795:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 628,
											"mutability": "mutable",
											"name": "metadata",
											"nameLocation": "4827:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 633,
											"src": "4818:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
												"typeString": "struct Metadata"
											},
											"typeName": {
												"id": 627,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 626,
													"name": "Metadata",
													"nameLocations": [
														"4818:8:1"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1317,
													"src": "4818:8:1"
												},
												"referencedDeclaration": 1317,
												"src": "4818:8:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
													"typeString": "struct Metadata"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 630,
											"mutability": "mutable",
											"name": "managerRole",
											"nameLocation": "4853:11:1",
											"nodeType": "VariableDeclaration",
											"scope": 633,
											"src": "4845:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 629,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "4845:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 632,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "4882:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 633,
											"src": "4874:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 631,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "4874:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Pool",
									"nameLocation": "4725:4:1",
									"nodeType": "StructDefinition",
									"scope": 945,
									"src": "4718:180:1",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 634,
										"nodeType": "StructuredDocumentation",
										"src": "4998:402:1",
										"text": "@notice Event emitted when a new pool is created\n @param poolId ID of the pool created\n @param profileId ID of the profile the pool is associated with\n @param strategy Address of the strategy contract\n @param token Address of the token pool was funded with when created\n @param amount Amount pool was funded with when created\n @param metadata Pool metadata"
									},
									"eventSelector": "69bcb5a6cf6a3c95185cbb451e77787240c866dd2e8332597e3013ff18a1aba1",
									"id": 650,
									"name": "PoolCreated",
									"nameLocation": "5411:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 636,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "5448:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5432:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5432:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 638,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "5480:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5464:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 637,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5464:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 641,
												"indexed": false,
												"mutability": "mutable",
												"name": "strategy",
												"nameLocation": "5509:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5499:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IStrategy_$1307",
													"typeString": "contract IStrategy"
												},
												"typeName": {
													"id": 640,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 639,
														"name": "IStrategy",
														"nameLocations": [
															"5499:9:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1307,
														"src": "5499:9:1"
													},
													"referencedDeclaration": 1307,
													"src": "5499:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IStrategy_$1307",
														"typeString": "contract IStrategy"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 643,
												"indexed": false,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5535:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5527:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5527:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5558:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5550:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 644,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5550:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 648,
												"indexed": false,
												"mutability": "mutable",
												"name": "metadata",
												"nameLocation": "5583:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5574:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 647,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 646,
														"name": "Metadata",
														"nameLocations": [
															"5574:8:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1317,
														"src": "5574:8:1"
													},
													"referencedDeclaration": 1317,
													"src": "5574:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5422:175:1"
									},
									"src": "5405:193:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 651,
										"nodeType": "StructuredDocumentation",
										"src": "5604:152:1",
										"text": "@notice Emitted when a pools metadata is updated\n @param poolId ID of the pool updated\n @param metadata Pool metadata that was updated"
									},
									"eventSelector": "14f52b76bda9e4c482842cefda2968d332933577988f224e80aae18fba10edf0",
									"id": 658,
									"name": "PoolMetadataUpdated",
									"nameLocation": "5767:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "5803:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "5787:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 656,
												"indexed": false,
												"mutability": "mutable",
												"name": "metadata",
												"nameLocation": "5820:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "5811:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 655,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 654,
														"name": "Metadata",
														"nameLocations": [
															"5811:8:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1317,
														"src": "5811:8:1"
													},
													"referencedDeclaration": 1317,
													"src": "5811:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5786:43:1"
									},
									"src": "5761:69:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 659,
										"nodeType": "StructuredDocumentation",
										"src": "5836:191:1",
										"text": "@notice Emitted when a pool is funded\n @param poolId ID of the pool funded\n @param amount Amount funded to the pool\n @param fee Amount of the fee paid to the treasury"
									},
									"eventSelector": "bf59838198f4ea92f663f5c1fc697f151a1b746b7dff86d564f250a55cbb4851",
									"id": 667,
									"name": "PoolFunded",
									"nameLocation": "6038:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "6065:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "6049:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6049:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 663,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6081:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "6073:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 662,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6073:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 665,
												"indexed": false,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "6097:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "6089:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6089:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6048:53:1"
									},
									"src": "6032:70:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "6108:158:1",
										"text": "@notice Emitted when the base fee is paid\n @param poolId ID of the pool the base fee was paid for\n @param amount Amount of the base fee paid"
									},
									"eventSelector": "02e340b51c6ae66fd22509c9b016f224c47a54063d4259fe3d860958e9eaac72",
									"id": 674,
									"name": "BaseFeePaid",
									"nameLocation": "6277:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "6305:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6289:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6289:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6321:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6313:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6313:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6288:40:1"
									},
									"src": "6271:58:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "6335:108:1",
										"text": "@notice Emitted when the treasury address is updated\n @param treasury Address of the new treasury"
									},
									"eventSelector": "7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d1",
									"id": 679,
									"name": "TreasuryUpdated",
									"nameLocation": "6454:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"indexed": false,
												"mutability": "mutable",
												"name": "treasury",
												"nameLocation": "6478:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "6470:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6470:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6469:18:1"
									},
									"src": "6448:40:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 680,
										"nodeType": "StructuredDocumentation",
										"src": "6494:104:1",
										"text": "@notice Emitted when the percent fee is updated\n @param percentFee New percentage for the fee"
									},
									"eventSelector": "9e826789de2de708fd9f09edea1182545e543893caa8ff71f8eb3aab50a4b065",
									"id": 684,
									"name": "PercentFeeUpdated",
									"nameLocation": "6609:17:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"indexed": false,
												"mutability": "mutable",
												"name": "percentFee",
												"nameLocation": "6635:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "6627:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6627:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6626:20:1"
									},
									"src": "6603:44:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 685,
										"nodeType": "StructuredDocumentation",
										"src": "6653:91:1",
										"text": "@notice Emitted when the base fee is updated\n @param baseFee New base fee amount"
									},
									"eventSelector": "803bee7e92bbc6ae7a1551f9f4ed3e31a8ea8df32e93332f41b0028f1091f9c3",
									"id": 689,
									"name": "BaseFeeUpdated",
									"nameLocation": "6755:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 687,
												"indexed": false,
												"mutability": "mutable",
												"name": "baseFee",
												"nameLocation": "6778:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6770:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 686,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6770:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6769:17:1"
									},
									"src": "6749:38:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 690,
										"nodeType": "StructuredDocumentation",
										"src": "6793:108:1",
										"text": "@notice Emitted when the registry address is updated\n @param registry Address of the new registry"
									},
									"eventSelector": "d6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd",
									"id": 694,
									"name": "RegistryUpdated",
									"nameLocation": "6912:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 692,
												"indexed": false,
												"mutability": "mutable",
												"name": "registry",
												"nameLocation": "6936:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "6928:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 691,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6928:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6927:18:1"
									},
									"src": "6906:40:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 695,
										"nodeType": "StructuredDocumentation",
										"src": "6952:142:1",
										"text": "@notice Emitted when a strategy is approved and added to the cloneable strategies\n @param strategy Address of the strategy approved"
									},
									"eventSelector": "960dd94cbb79169f09a4e445d58b895df2d9bffa5b31055d0932d801724a20d1",
									"id": 699,
									"name": "StrategyApproved",
									"nameLocation": "7105:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 697,
												"indexed": false,
												"mutability": "mutable",
												"name": "strategy",
												"nameLocation": "7130:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "7122:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 696,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7122:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7121:18:1"
									},
									"src": "7099:41:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 700,
										"nodeType": "StructuredDocumentation",
										"src": "7146:132:1",
										"text": "@notice Emitted when a strategy is removed from the cloneable strategies\n @param strategy Address of the strategy removed"
									},
									"eventSelector": "09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea4",
									"id": 704,
									"name": "StrategyRemoved",
									"nameLocation": "7289:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 702,
												"indexed": false,
												"mutability": "mutable",
												"name": "strategy",
												"nameLocation": "7313:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 704,
												"src": "7305:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7305:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7304:18:1"
									},
									"src": "7283:40:1"
								},
								{
									"documentation": {
										"id": 705,
										"nodeType": "StructuredDocumentation",
										"src": "7465:280:1",
										"text": "@notice Initialize the Allo contract\n @param _owner Address of the owner\n @param _registry Address of the registry contract\n @param _treasury Address of the treasury\n @param _percentFee Percentage for the fee\n @param _baseFee Base fee amount"
									},
									"functionSelector": "a6b63eb8",
									"id": 718,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "7759:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 707,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "7787:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "7779:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 706,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7779:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "_registry",
												"nameLocation": "7811:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "7803:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7803:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "_treasury",
												"nameLocation": "7846:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "7830:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 710,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7830:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "_percentFee",
												"nameLocation": "7873:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "7865:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 712,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7865:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "_baseFee",
												"nameLocation": "7902:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "7894:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 714,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7894:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7769:147:1"
									},
									"returnParameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7925:0:1"
									},
									"scope": 945,
									"src": "7750:176:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 719,
										"nodeType": "StructuredDocumentation",
										"src": "7932:186:1",
										"text": "@notice Updates a pools metadata.\n @dev 'msg.sender' must be a pool admin.\n @param _poolId The ID of the pool to update\n @param _metadata The new metadata to set"
									},
									"functionSelector": "5f9ca138",
									"id": 727,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updatePoolMetadata",
									"nameLocation": "8132:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "8159:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "8151:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 720,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8151:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "8184:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "8168:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 723,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 722,
														"name": "Metadata",
														"nameLocations": [
															"8168:8:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1317,
														"src": "8168:8:1"
													},
													"referencedDeclaration": 1317,
													"src": "8168:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8150:44:1"
									},
									"returnParameters": {
										"id": 726,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8203:0:1"
									},
									"scope": 945,
									"src": "8123:81:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 728,
										"nodeType": "StructuredDocumentation",
										"src": "8210:149:1",
										"text": "@notice Update the registry address.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _registry The new registry address"
									},
									"functionSelector": "1a5da6c8",
									"id": 733,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateRegistry",
									"nameLocation": "8373:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "_registry",
												"nameLocation": "8396:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "8388:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8388:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8387:19:1"
									},
									"returnParameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8415:0:1"
									},
									"scope": 945,
									"src": "8364:52:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 734,
										"nodeType": "StructuredDocumentation",
										"src": "8422:150:1",
										"text": "@notice Updates the treasury address.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _treasury The new treasury address"
									},
									"functionSelector": "7f51bb1f",
									"id": 739,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateTreasury",
									"nameLocation": "8586:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "_treasury",
												"nameLocation": "8617:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "8601:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 735,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8601:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:27:1"
									},
									"returnParameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8636:0:1"
									},
									"scope": 945,
									"src": "8577:60:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 740,
										"nodeType": "StructuredDocumentation",
										"src": "8643:164:1",
										"text": "@notice Updates the percentage for the fee.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _percentFee The new percentage for the fee"
									},
									"functionSelector": "f54fc4a0",
									"id": 745,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updatePercentFee",
									"nameLocation": "8821:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "_percentFee",
												"nameLocation": "8846:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 745,
												"src": "8838:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8838:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8837:21:1"
									},
									"returnParameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8867:0:1"
									},
									"scope": 945,
									"src": "8812:56:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 746,
										"nodeType": "StructuredDocumentation",
										"src": "8874:133:1",
										"text": "@notice Updates the base fee.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _baseFee The new base fee"
									},
									"functionSelector": "8e690186",
									"id": 751,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateBaseFee",
									"nameLocation": "9021:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "_baseFee",
												"nameLocation": "9043:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "9035:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 747,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9035:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9034:18:1"
									},
									"returnParameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9061:0:1"
									},
									"scope": 945,
									"src": "9012:50:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 752,
										"nodeType": "StructuredDocumentation",
										"src": "9068:175:1",
										"text": "@notice Adds a strategy to the cloneable strategies.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _strategy The address of the strategy to add"
									},
									"functionSelector": "41bba0b4",
									"id": 757,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addToCloneableStrategies",
									"nameLocation": "9257:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "_strategy",
												"nameLocation": "9290:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "9282:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 753,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9282:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9281:19:1"
									},
									"returnParameters": {
										"id": 756,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9309:0:1"
									},
									"scope": 945,
									"src": "9248:62:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 758,
										"nodeType": "StructuredDocumentation",
										"src": "9316:183:1",
										"text": "@notice Removes a strategy from the cloneable strategies.\n @dev 'msg.sender' must be the Allo contract owner.\n @param _strategy The address of the strategy to remove"
									},
									"functionSelector": "031e2fa1",
									"id": 763,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeFromCloneableStrategies",
									"nameLocation": "9513:29:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "_strategy",
												"nameLocation": "9551:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "9543:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9543:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9542:19:1"
									},
									"returnParameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9570:0:1"
									},
									"scope": 945,
									"src": "9504:67:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 764,
										"nodeType": "StructuredDocumentation",
										"src": "9577:214:1",
										"text": "@notice Adds a pool manager to the pool.\n @dev 'msg.sender' must be a pool admin.\n @param _poolId The ID of the pool to add the manager to\n @param _manager The address of the manager to add"
									},
									"functionSelector": "2cf682b0",
									"id": 771,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addPoolManager",
									"nameLocation": "9805:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "9828:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "9820:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "_manager",
												"nameLocation": "9845:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "9837:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9837:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9819:35:1"
									},
									"returnParameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9863:0:1"
									},
									"scope": 945,
									"src": "9796:68:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 772,
										"nodeType": "StructuredDocumentation",
										"src": "9870:227:1",
										"text": "@notice Removes a pool manager from the pool.\n @dev 'msg.sender' must be a pool admin.\n @param _poolId The ID of the pool to remove the manager from\n @param _manager The address of the manager to remove"
									},
									"functionSelector": "7f5a70bd",
									"id": 779,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removePoolManager",
									"nameLocation": "10111:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "10137:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "10129:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10129:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "_manager",
												"nameLocation": "10154:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "10146:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 775,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10146:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10128:35:1"
									},
									"returnParameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10172:0:1"
									},
									"scope": 945,
									"src": "10102:71:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 780,
										"nodeType": "StructuredDocumentation",
										"src": "10179:199:1",
										"text": "@notice Recovers funds from a pool.\n @dev 'msg.sender' must be a pool admin.\n @param _token The token to recover\n @param _recipient The address to send the recovered funds to"
									},
									"functionSelector": "24ae6a27",
									"id": 787,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "recoverFunds",
									"nameLocation": "10392:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "10413:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "10405:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10405:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "_recipient",
												"nameLocation": "10429:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "10421:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 783,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10421:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10404:36:1"
									},
									"returnParameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10449:0:1"
									},
									"scope": 945,
									"src": "10383:67:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 788,
										"nodeType": "StructuredDocumentation",
										"src": "10456:197:1",
										"text": "@notice Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy.\n @param _poolId The ID of the pool to register the recipient for"
									},
									"functionSelector": "075c0e9c",
									"id": 797,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerRecipient",
									"nameLocation": "10667:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "10693:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "10685:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 789,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10715:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "10702:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 791,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10702:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10684:37:1"
									},
									"returnParameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "10748:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 794,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10748:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10747:9:1"
									},
									"scope": 945,
									"src": "10658:99:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "10763:215:1",
										"text": "@notice Registers a batch of recipients.\n @param _poolIds The pool ID's to register the recipients for\n @param _data The data to pass to the strategy and may be handled differently by each strategy"
									},
									"functionSelector": "1a20bd88",
									"id": 810,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchRegisterRecipient",
									"nameLocation": "10992:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "_poolIds",
												"nameLocation": "11032:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "11015:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 799,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11015:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 800,
													"nodeType": "ArrayTypeName",
													"src": "11015:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "11057:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "11042:20:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 802,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "11042:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 803,
													"nodeType": "ArrayTypeName",
													"src": "11042:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11014:49:1"
									},
									"returnParameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "11098:16:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 806,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11098:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 807,
													"nodeType": "ArrayTypeName",
													"src": "11098:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11097:18:1"
									},
									"scope": 945,
									"src": "10983:133:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 811,
										"nodeType": "StructuredDocumentation",
										"src": "11122:300:1",
										"text": "@notice Funds a pool.\n @dev 'msg.value' must be greater than 0 if the token is the native token\n       or '_amount' must be greater than 0 if the token is not the native token.\n @param _poolId The ID of the pool to fund\n @param _amount The amount to fund the pool with"
									},
									"functionSelector": "5acd6fac",
									"id": 818,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fundPool",
									"nameLocation": "11436:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "11453:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "11445:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 812,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "11470:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "11462:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 814,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11462:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11444:34:1"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11495:0:1"
									},
									"scope": 945,
									"src": "11427:69:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 819,
										"nodeType": "StructuredDocumentation",
										"src": "11502:287:1",
										"text": "@notice Allocates funds to a recipient.\n @dev Each strategy will handle the allocation of funds differently.\n @param _poolId The ID of the pool to allocate funds from\n @param _data The data to pass to the strategy and may be handled differently by each strategy."
									},
									"functionSelector": "2ec38188",
									"id": 826,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allocate",
									"nameLocation": "11803:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 821,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "11820:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "11812:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 820,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11812:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "11842:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "11829:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 822,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11829:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11811:37:1"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11865:0:1"
									},
									"scope": 945,
									"src": "11794:72:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "11872:126:1",
										"text": "@notice Allocates funds to multiple recipients.\n @dev Each strategy will handle the allocation of funds differently"
									},
									"functionSelector": "c6dff1cf",
									"id": 836,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchAllocate",
									"nameLocation": "12012:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "_poolIds",
												"nameLocation": "12045:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "12026:27:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 828,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12026:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 829,
													"nodeType": "ArrayTypeName",
													"src": "12026:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"mutability": "mutable",
												"name": "_datas",
												"nameLocation": "12070:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "12055:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 831,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "12055:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 832,
													"nodeType": "ArrayTypeName",
													"src": "12055:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12025:52:1"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12086:0:1"
									},
									"scope": 945,
									"src": "12003:84:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 837,
										"nodeType": "StructuredDocumentation",
										"src": "12093:391:1",
										"text": "@notice Distributes funds to recipients and emits {Distributed} event if successful\n @dev Each strategy will handle the distribution of funds differently\n @param _poolId The ID of the pool to distribute from\n @param _recipientIds The recipient ids to distribute to\n @param _data The data to pass to the strategy and may be handled differently by each strategy"
									},
									"functionSelector": "3a5fbd92",
									"id": 847,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nameLocation": "12498:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "12517:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "12509:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12509:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "12543:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "12526:30:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 840,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12526:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 841,
													"nodeType": "ArrayTypeName",
													"src": "12526:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "12571:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "12558:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 843,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12558:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12508:69:1"
									},
									"returnParameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12586:0:1"
									},
									"scope": 945,
									"src": "12489:98:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 848,
										"nodeType": "StructuredDocumentation",
										"src": "12696:221:1",
										"text": "@notice Checks if an address is a pool admin.\n @param _poolId The ID of the pool to check\n @param _address The address to check\n @return 'true' if the '_address' is a pool admin, otherwise 'false'"
									},
									"functionSelector": "ab3febc6",
									"id": 857,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolAdmin",
									"nameLocation": "12931:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "12951:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "12943:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12943:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "12968:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "12960:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12960:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12942:35:1"
									},
									"returnParameters": {
										"id": 856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 855,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "13001:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 854,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13001:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13000:6:1"
									},
									"scope": 945,
									"src": "12922:85:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 858,
										"nodeType": "StructuredDocumentation",
										"src": "13013:225:1",
										"text": "@notice Checks if an address is a pool manager.\n @param _poolId The ID of the pool to check\n @param _address The address to check\n @return 'true' if the '_address' is a pool manager, otherwise 'false'"
									},
									"functionSelector": "29e40d4b",
									"id": 867,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolManager",
									"nameLocation": "13252:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 860,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "13274:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "13266:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 859,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13266:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "13291:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "13283:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13283:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13265:35:1"
									},
									"returnParameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 865,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "13324:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 864,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13324:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13323:6:1"
									},
									"scope": 945,
									"src": "13243:87:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 868,
										"nodeType": "StructuredDocumentation",
										"src": "13336:222:1",
										"text": "@notice Checks if a strategy is cloneable (is in the cloneableStrategies mapping).\n @param _strategy The address of the strategy to check\n @return 'true' if the '_strategy' is cloneable, otherwise 'false'"
									},
									"functionSelector": "ab2ec589",
									"id": 875,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isCloneableStrategy",
									"nameLocation": "13572:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "_strategy",
												"nameLocation": "13600:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "13592:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 869,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13592:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13591:19:1"
									},
									"returnParameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "13634:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 872,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13634:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13633:6:1"
									},
									"scope": 945,
									"src": "13563:77:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 876,
										"nodeType": "StructuredDocumentation",
										"src": "13646:205:1",
										"text": "@notice Returns the address of the strategy for a given 'poolId'\n @param _poolId The ID of the pool to check\n @return strategy The address of the strategy for the ID of the pool passed in"
									},
									"functionSelector": "cfc0cc34",
									"id": 883,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getStrategy",
									"nameLocation": "13865:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "13885:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "13877:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 877,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13877:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13876:17:1"
									},
									"returnParameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "13917:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13917:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13916:9:1"
									},
									"scope": 945,
									"src": "13856:70:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 884,
										"nodeType": "StructuredDocumentation",
										"src": "13932:105:1",
										"text": "@notice Returns the current percent fee\n @return percentFee The current percentage for the fee"
									},
									"functionSelector": "4edbaadc",
									"id": 889,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPercentFee",
									"nameLocation": "14051:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14064:2:1"
									},
									"returnParameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "14090:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14090:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14089:9:1"
									},
									"scope": 945,
									"src": "14042:57:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "14105:85:1",
										"text": "@notice Returns the current base fee\n @return baseFee The current base fee"
									},
									"functionSelector": "15e812ad",
									"id": 895,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getBaseFee",
									"nameLocation": "14204:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14214:2:1"
									},
									"returnParameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "14240:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 892,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14240:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14239:9:1"
									},
									"scope": 945,
									"src": "14195:54:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 896,
										"nodeType": "StructuredDocumentation",
										"src": "14255:102:1",
										"text": "@notice Returns the current treasury address\n @return treasury The current treasury address"
									},
									"functionSelector": "3b19e84a",
									"id": 901,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTreasury",
									"nameLocation": "14371:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14382:2:1"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "14408:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 898,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14408:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14407:17:1"
									},
									"scope": 945,
									"src": "14362:63:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 902,
										"nodeType": "StructuredDocumentation",
										"src": "14431:102:1",
										"text": "@notice Returns the current registry address\n @return registry The current registry address"
									},
									"functionSelector": "5ab1bd53",
									"id": 908,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRegistry",
									"nameLocation": "14547:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14558:2:1"
									},
									"returnParameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 908,
												"src": "14584:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IRegistry_$1138",
													"typeString": "contract IRegistry"
												},
												"typeName": {
													"id": 905,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 904,
														"name": "IRegistry",
														"nameLocations": [
															"14584:9:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1138,
														"src": "14584:9:1"
													},
													"referencedDeclaration": 1138,
													"src": "14584:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IRegistry_$1138",
														"typeString": "contract IRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14583:11:1"
									},
									"scope": 945,
									"src": "14538:57:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 909,
										"nodeType": "StructuredDocumentation",
										"src": "14601:181:1",
										"text": "@notice Returns the 'Pool' struct for a given 'poolId'\n @param _poolId The ID of the pool to check\n @return pool The 'Pool' struct for the ID of the pool passed in"
									},
									"functionSelector": "068bcd8d",
									"id": 917,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nameLocation": "14796:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "14812:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "14804:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 910,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14804:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14803:17:1"
									},
									"returnParameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "14844:11:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Pool_$633_memory_ptr",
													"typeString": "struct IAllo.Pool"
												},
												"typeName": {
													"id": 914,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 913,
														"name": "Pool",
														"nameLocations": [
															"14844:4:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 633,
														"src": "14844:4:1"
													},
													"referencedDeclaration": 633,
													"src": "14844:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Pool_$633_storage_ptr",
														"typeString": "struct IAllo.Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14843:13:1"
									},
									"scope": 945,
									"src": "14787:70:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 918,
										"nodeType": "StructuredDocumentation",
										"src": "14863:140:1",
										"text": "@notice Returns the current fee denominator\n @dev 1e18 represents 100%\n @return feeDenominator The current fee denominator"
									},
									"functionSelector": "f4e1fc41",
									"id": 923,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFeeDenominator",
									"nameLocation": "15017:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15034:2:1"
									},
									"returnParameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "15060:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 920,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15060:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15059:9:1"
									},
									"scope": 945,
									"src": "15008:61:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "e1007d4a",
									"id": 944,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPoolWithCustomStrategy",
									"nameLocation": "15084:28:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "15130:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "15122:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 924,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15122:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "_strategy",
												"nameLocation": "15158:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "15150:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15150:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "_initStrategyData",
												"nameLocation": "15190:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "15177:30:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 928,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15177:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "15225:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "15217:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15217:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "15249:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "15241:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15241:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "15282:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "15266:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 935,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 934,
														"name": "Metadata",
														"nameLocations": [
															"15266:8:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1317,
														"src": "15266:8:1"
													},
													"referencedDeclaration": 1317,
													"src": "15266:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "_managers",
												"nameLocation": "15318:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "15301:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 937,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "15301:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 938,
													"nodeType": "ArrayTypeName",
													"src": "15301:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15112:221:1"
									},
									"returnParameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "15368:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "15360:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15360:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15359:16:1"
									},
									"scope": 945,
									"src": "15075:301:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 946,
							"src": "4531:10847:1",
							"usedErrors": [],
							"usedEvents": [
								650,
								658,
								667,
								674,
								679,
								684,
								689,
								694,
								699,
								704
							]
						}
					],
					"src": "42:15337:1"
				},
				"id": 1
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol": {
				"ast": {
					"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IRegistry.sol",
					"exportedSymbols": {
						"IRegistry": [
							1138
						],
						"Metadata": [
							1317
						]
					},
					"id": 1139,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 947,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:2"
						},
						{
							"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol",
							"file": "../libraries/Metadata.sol",
							"id": 949,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1139,
							"sourceUnit": 1318,
							"src": "80:51:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 948,
										"name": "Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1317,
										"src": "88:8:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 950,
								"nodeType": "StructuredDocumentation",
								"src": "4124:931:2",
								"text": "@title IRegistry Interface\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice Interface for the Registry contract and exposes all functions needed to use the Registry\n         within the Allo protocol.\n @dev The Registry Interface is used to interact with the Allo protocol and create profiles\n      that can be used to interact with the Allo protocol. The Registry is the main contract\n      that all other contracts interact with to get the 'Profile' information needed to\n      interact with the Allo protocol. The Registry is also used to create new profiles\n      and update existing profiles. The Registry is also used to add and remove members\n      from a profile. The Registry will not always be used in a strategy and will depend on\n      the strategy being used."
							},
							"fullyImplemented": false,
							"id": 1138,
							"linearizedBaseContracts": [
								1138
							],
							"name": "IRegistry",
							"nameLocation": "5065:9:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IRegistry.Profile",
									"documentation": {
										"id": 951,
										"nodeType": "StructuredDocumentation",
										"src": "5175:60:2",
										"text": "@dev The Profile struct that all profiles are based from"
									},
									"id": 965,
									"members": [
										{
											"constant": false,
											"id": 953,
											"mutability": "mutable",
											"name": "id",
											"nameLocation": "5273:2:2",
											"nodeType": "VariableDeclaration",
											"scope": 965,
											"src": "5265:10:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 952,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "5265:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 955,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "5293:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 965,
											"src": "5285:13:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 954,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5285:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 957,
											"mutability": "mutable",
											"name": "name",
											"nameLocation": "5315:4:2",
											"nodeType": "VariableDeclaration",
											"scope": 965,
											"src": "5308:11:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 956,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "5308:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 960,
											"mutability": "mutable",
											"name": "metadata",
											"nameLocation": "5338:8:2",
											"nodeType": "VariableDeclaration",
											"scope": 965,
											"src": "5329:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
												"typeString": "struct Metadata"
											},
											"typeName": {
												"id": 959,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 958,
													"name": "Metadata",
													"nameLocations": [
														"5329:8:2"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1317,
													"src": "5329:8:2"
												},
												"referencedDeclaration": 1317,
												"src": "5329:8:2",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
													"typeString": "struct Metadata"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 962,
											"mutability": "mutable",
											"name": "owner",
											"nameLocation": "5364:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 965,
											"src": "5356:13:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 961,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "5356:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 964,
											"mutability": "mutable",
											"name": "anchor",
											"nameLocation": "5387:6:2",
											"nodeType": "VariableDeclaration",
											"scope": 965,
											"src": "5379:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 963,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "5379:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Profile",
									"nameLocation": "5247:7:2",
									"nodeType": "StructDefinition",
									"scope": 1138,
									"src": "5240:160:2",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 966,
										"nodeType": "StructuredDocumentation",
										"src": "5500:81:2",
										"text": "@dev Emitted when a profile is created. This will return your anchor address."
									},
									"eventSelector": "1e28352ff00d67474b59b87e6817d6ba65daa0130446266db8640214d8b80609",
									"id": 981,
									"name": "ProfileCreated",
									"nameLocation": "5592:14:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "5632:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "5616:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 967,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5616:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 970,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "5651:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "5643:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5643:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 972,
												"indexed": false,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5665:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "5658:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 971,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5658:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 975,
												"indexed": false,
												"mutability": "mutable",
												"name": "metadata",
												"nameLocation": "5680:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "5671:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 974,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 973,
														"name": "Metadata",
														"nameLocations": [
															"5671:8:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1317,
														"src": "5671:8:2"
													},
													"referencedDeclaration": 1317,
													"src": "5671:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 977,
												"indexed": false,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5698:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "5690:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 976,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5690:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 979,
												"indexed": false,
												"mutability": "mutable",
												"name": "anchor",
												"nameLocation": "5713:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "5705:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 978,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5705:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5606:119:2"
									},
									"src": "5586:140:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 982,
										"nodeType": "StructuredDocumentation",
										"src": "5732:116:2",
										"text": "@dev Emitted when a profile name is updated. This will update the anchor when the name is updated and return it."
									},
									"eventSelector": "54cd733148631b9ff1cb945f2d0dcd33c0692e154763bfa2f35e2d10a76c432f",
									"id": 990,
									"name": "ProfileNameUpdated",
									"nameLocation": "5859:18:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "5894:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "5878:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 983,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5878:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"indexed": false,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5912:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "5905:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 985,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5905:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"indexed": false,
												"mutability": "mutable",
												"name": "anchor",
												"nameLocation": "5926:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "5918:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5918:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5877:56:2"
									},
									"src": "5853:81:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 991,
										"nodeType": "StructuredDocumentation",
										"src": "5940:54:2",
										"text": "@dev Emitted when a profile's metadata is updated."
									},
									"eventSelector": "a366054a574e4f861cb295fd23b5440c5119c1ba329c36f5dfeb5643537cb0f3",
									"id": 998,
									"name": "ProfileMetadataUpdated",
									"nameLocation": "6005:22:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 993,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "6044:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "6028:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 992,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6028:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 996,
												"indexed": false,
												"mutability": "mutable",
												"name": "metadata",
												"nameLocation": "6064:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "6055:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 995,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 994,
														"name": "Metadata",
														"nameLocations": [
															"6055:8:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1317,
														"src": "6055:8:2"
													},
													"referencedDeclaration": 1317,
													"src": "6055:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6027:46:2"
									},
									"src": "5999:75:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 999,
										"nodeType": "StructuredDocumentation",
										"src": "6080:49:2",
										"text": "@dev Emitted when a profile owner is updated."
									},
									"eventSelector": "fd9ad63830df7bdf1586c8293dc88a30864cb43e9037e7afdb2c7210facf217d",
									"id": 1005,
									"name": "ProfileOwnerUpdated",
									"nameLocation": "6140:19:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "6176:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "6160:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1000,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6160:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"indexed": false,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6195:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "6187:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6187:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6159:42:2"
									},
									"src": "6134:68:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "6208:57:2",
										"text": "@dev Emitted when a profile pending owner is updated."
									},
									"eventSelector": "21fe5cd61055ef88f636a264885b927f3ec2b380b6053a6b4a7495a6336a95c8",
									"id": 1012,
									"name": "ProfilePendingOwnerUpdated",
									"nameLocation": "6276:26:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"indexed": true,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "6319:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "6303:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1007,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6303:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1010,
												"indexed": false,
												"mutability": "mutable",
												"name": "pendingOwner",
												"nameLocation": "6338:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "6330:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1009,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6330:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6302:49:2"
									},
									"src": "6270:82:2"
								},
								{
									"documentation": {
										"id": 1013,
										"nodeType": "StructuredDocumentation",
										"src": "6461:192:2",
										"text": "@dev Returns the 'Profile' for a '_profileId' passed\n @param _profileId The 'profileId' to return the 'Profile' for\n @return profile The 'Profile' for the '_profileId' passed"
									},
									"functionSelector": "0114cf0a",
									"id": 1021,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getProfileById",
									"nameLocation": "6667:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "6690:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "6682:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1014,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6682:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6681:20:2"
									},
									"returnParameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "profile",
												"nameLocation": "6740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "6725:22:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Profile_$965_memory_ptr",
													"typeString": "struct IRegistry.Profile"
												},
												"typeName": {
													"id": 1018,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1017,
														"name": "Profile",
														"nameLocations": [
															"6725:7:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 965,
														"src": "6725:7:2"
													},
													"referencedDeclaration": 965,
													"src": "6725:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Profile_$965_storage_ptr",
														"typeString": "struct IRegistry.Profile"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6724:24:2"
									},
									"scope": 1138,
									"src": "6658:91:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1022,
										"nodeType": "StructuredDocumentation",
										"src": "6755:181:2",
										"text": "@dev Returns the 'Profile' for an '_anchor' passed\n @param _anchor The 'anchor' to return the 'Profile' for\n @return profile The 'Profile' for the '_anchor' passed"
									},
									"functionSelector": "dd93da43",
									"id": 1030,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getProfileByAnchor",
									"nameLocation": "6950:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "_anchor",
												"nameLocation": "6977:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "6969:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1023,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6969:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6968:17:2"
									},
									"returnParameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "profile",
												"nameLocation": "7024:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "7009:22:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Profile_$965_memory_ptr",
													"typeString": "struct IRegistry.Profile"
												},
												"typeName": {
													"id": 1027,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1026,
														"name": "Profile",
														"nameLocations": [
															"7009:7:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 965,
														"src": "7009:7:2"
													},
													"referencedDeclaration": 965,
													"src": "7009:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Profile_$965_storage_ptr",
														"typeString": "struct IRegistry.Profile"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7008:24:2"
									},
									"scope": 1138,
									"src": "6941:92:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1031,
										"nodeType": "StructuredDocumentation",
										"src": "7039:415:2",
										"text": "@dev Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in\n @param _profileId The 'profileId' to check if the '_account' is a member or owner of\n @param _account The 'account' to check if they are a member or owner of the '_profileId' passed in\n @return isOwnerOrMemberOfProfile A boolean if the '_account' is a member or owner of the '_profileId' passed in"
									},
									"functionSelector": "5e8a7915",
									"id": 1040,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOwnerOrMemberOfProfile",
									"nameLocation": "7468:24:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "7501:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "7493:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1032,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "_account",
												"nameLocation": "7521:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "7513:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7513:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7492:38:2"
									},
									"returnParameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "isOwnerOrMemberOfProfile",
												"nameLocation": "7583:24:2",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "7578:29:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1037,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7578:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7577:31:2"
									},
									"scope": 1138,
									"src": "7459:150:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1041,
										"nodeType": "StructuredDocumentation",
										"src": "7615:367:2",
										"text": "@dev Returns a boolean if the '_account' is an owner of the '_profileId' passed in\n @param _profileId The 'profileId' to check if the '_account' is an owner of\n @param _owner The 'owner' to check if they are an owner of the '_profileId' passed in\n @return isOwnerOfProfile A boolean if the '_account' is an owner of the '_profileId' passed in"
									},
									"functionSelector": "39b86b8c",
									"id": 1050,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOwnerOfProfile",
									"nameLocation": "7996:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "8021:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "8013:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1042,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8013:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "8041:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "8033:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8033:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8012:36:2"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "isOwnerOfProfile",
												"nameLocation": "8077:16:2",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "8072:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1047,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8072:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8071:23:2"
									},
									"scope": 1138,
									"src": "7987:108:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1051,
										"nodeType": "StructuredDocumentation",
										"src": "8101:370:2",
										"text": "@dev Returns a boolean if the '_account' is a member of the '_profileId' passed in\n @param _profileId The 'profileId' to check if the '_account' is a member of\n @param _member The 'member' to check if they are a member of the '_profileId' passed in\n @return isMemberOfProfile A boolean if the '_account' is a member of the '_profileId' passed in"
									},
									"functionSelector": "0ec1fbac",
									"id": 1060,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isMemberOfProfile",
									"nameLocation": "8485:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "8511:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "8503:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1052,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8503:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "_member",
												"nameLocation": "8531:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "8523:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8523:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8502:37:2"
									},
									"returnParameters": {
										"id": 1059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1058,
												"mutability": "mutable",
												"name": "isMemberOfProfile",
												"nameLocation": "8568:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "8563:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1057,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8563:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8562:24:2"
									},
									"scope": 1138,
									"src": "8476:111:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1061,
										"nodeType": "StructuredDocumentation",
										"src": "8729:677:2",
										"text": "@dev Creates a new 'Profile' and returns the 'profileId' of the new profile\n Note: The 'name' and 'nonce' are used to generate the 'anchor' address\n Requirements: None, anyone can create a new profile\n @param _nonce The nonce to use to generate the 'anchor' address\n @param _name The name to use to generate the 'anchor' address\n @param _metadata The 'Metadata' to use to generate the 'anchor' address\n @param _owner The 'owner' to use to generate the 'anchor' address\n @param _members The 'members' to use to generate the 'anchor' address\n @return profileId The 'profileId' of the new profile"
									},
									"functionSelector": "3a92f65f",
									"id": 1078,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createProfile",
									"nameLocation": "9420:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "_nonce",
												"nameLocation": "9451:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "9443:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1062,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9443:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "_name",
												"nameLocation": "9481:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "9467:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1064,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9467:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "9512:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "9496:25:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 1067,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1066,
														"name": "Metadata",
														"nameLocations": [
															"9496:8:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1317,
														"src": "9496:8:2"
													},
													"referencedDeclaration": 1317,
													"src": "9496:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "9539:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "9531:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1069,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9531:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "_members",
												"nameLocation": "9572:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "9555:25:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1071,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "9555:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1072,
													"nodeType": "ArrayTypeName",
													"src": "9555:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9433:153:2"
									},
									"returnParameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "9613:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "9605:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1075,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9605:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9604:19:2"
									},
									"scope": 1138,
									"src": "9411:213:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1079,
										"nodeType": "StructuredDocumentation",
										"src": "9630:625:2",
										"text": "@dev Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address\n Requirements: Only the 'Profile' owner can update the name\n Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'\n       so please use caution. You can always recreate your 'anchor' address by updating the name back\n       to the original name used to create the profile.\n @param _profileId The 'profileId' to update the name for\n @param _name The new 'name' value\n @return anchor The new 'anchor' address"
									},
									"functionSelector": "cf189ff2",
									"id": 1088,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateProfileName",
									"nameLocation": "10269:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1081,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "10295:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "10287:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1080,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10287:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "_name",
												"nameLocation": "10321:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "10307:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1082,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "10307:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10286:41:2"
									},
									"returnParameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "anchor",
												"nameLocation": "10354:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1088,
												"src": "10346:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1085,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10346:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10345:16:2"
									},
									"scope": 1138,
									"src": "10260:102:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1089,
										"nodeType": "StructuredDocumentation",
										"src": "10368:267:2",
										"text": "@dev Updates the 'Metadata' of the '_profileId' passed in\n Requirements: Only the 'Profile' owner can update the metadata\n @param _profileId The 'profileId' to update the metadata for\n @param _metadata The new 'Metadata' value"
									},
									"functionSelector": "ac402839",
									"id": 1097,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateProfileMetadata",
									"nameLocation": "10649:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "10679:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "10671:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1090,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10671:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "_metadata",
												"nameLocation": "10707:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "10691:25:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Metadata_$1317_memory_ptr",
													"typeString": "struct Metadata"
												},
												"typeName": {
													"id": 1093,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1092,
														"name": "Metadata",
														"nameLocations": [
															"10691:8:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1317,
														"src": "10691:8:2"
													},
													"referencedDeclaration": 1317,
													"src": "10691:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Metadata_$1317_storage_ptr",
														"typeString": "struct Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10670:47:2"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10726:0:2"
									},
									"scope": 1138,
									"src": "10640:87:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1098,
										"nodeType": "StructuredDocumentation",
										"src": "10733:291:2",
										"text": "@dev Updates the pending 'owner' of the '_profileId' passed in\n Requirements: Only the 'Profile' owner can update the pending owner\n @param _profileId The 'profileId' to update the pending owner for\n @param _pendingOwner The new pending 'owner' value"
									},
									"functionSelector": "3b66dacd",
									"id": 1105,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateProfilePendingOwner",
									"nameLocation": "11038:25:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "11072:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "11064:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1099,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11064:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "_pendingOwner",
												"nameLocation": "11092:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "11084:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11084:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11063:43:2"
									},
									"returnParameters": {
										"id": 1104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11115:0:2"
									},
									"scope": 1138,
									"src": "11029:87:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1106,
										"nodeType": "StructuredDocumentation",
										"src": "11122:222:2",
										"text": "@dev Accepts the pending 'owner' of the '_profileId' passed in\n Requirements: Only the pending owner can accept the ownership\n @param _profileId The 'profileId' to accept the ownership for"
									},
									"functionSelector": "2497f3c6",
									"id": 1111,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "acceptProfileOwnership",
									"nameLocation": "11358:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "11389:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "11381:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1107,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11381:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11380:20:2"
									},
									"returnParameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11409:0:2"
									},
									"scope": 1138,
									"src": "11349:61:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1112,
										"nodeType": "StructuredDocumentation",
										"src": "11416:263:2",
										"text": "@dev Adds members to the '_profileId' passed in\n Requirements: Only the 'Profile' owner can add members\n @param _profileId The 'profileId' to add members to\n @param _members The members to add to the '_profileId' passed in"
									},
									"functionSelector": "5063f361",
									"id": 1120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addMembers",
									"nameLocation": "11693:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "11712:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "11704:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1113,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11704:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "_members",
												"nameLocation": "11741:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "11724:25:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1115,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11724:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1116,
													"nodeType": "ArrayTypeName",
													"src": "11724:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11703:47:2"
									},
									"returnParameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11759:0:2"
									},
									"scope": 1138,
									"src": "11684:76:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1121,
										"nodeType": "StructuredDocumentation",
										"src": "11766:281:2",
										"text": "@dev Removes members from the '_profileId' passed in\n Requirements: Only the 'Profile' owner can remove members\n @param _profileId The 'profileId' to remove members from\n @param _members The members to remove from the '_profileId' passed in"
									},
									"functionSelector": "e0cf1e4c",
									"id": 1129,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeMembers",
									"nameLocation": "12061:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "_profileId",
												"nameLocation": "12083:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "12075:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1122,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12075:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "_members",
												"nameLocation": "12112:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "12095:25:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1124,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12095:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1125,
													"nodeType": "ArrayTypeName",
													"src": "12095:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12074:47:2"
									},
									"returnParameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12130:0:2"
									},
									"scope": 1138,
									"src": "12052:79:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1130,
										"nodeType": "StructuredDocumentation",
										"src": "12137:230:2",
										"text": "@dev Recovers funds from the contract\n Requirements: Must be the Allo owner\n @param _token The token you want to use to recover funds\n @param _recipient The recipient of the recovered funds"
									},
									"functionSelector": "24ae6a27",
									"id": 1137,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "recoverFunds",
									"nameLocation": "12381:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "12402:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "12394:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12394:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "_recipient",
												"nameLocation": "12418:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "12410:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12410:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12393:36:2"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12438:0:2"
									},
									"scope": 1138,
									"src": "12372:67:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1139,
							"src": "5055:7386:2",
							"usedErrors": [],
							"usedEvents": [
								981,
								990,
								998,
								1005,
								1012
							]
						}
					],
					"src": "32:12410:2"
				},
				"id": 2
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol": {
				"ast": {
					"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IStrategy.sol",
					"exportedSymbols": {
						"IAllo": [
							945
						],
						"IStrategy": [
							1307
						]
					},
					"id": 1308,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1140,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "42:24:3"
						},
						{
							"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/interfaces/IAllo.sol",
							"file": "./IAllo.sol",
							"id": 1142,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1308,
							"sourceUnit": 946,
							"src": "82:34:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1141,
										"name": "IAllo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 945,
										"src": "90:5:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IStrategy",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1143,
								"nodeType": "StructuredDocumentation",
								"src": "4109:368:3",
								"text": "@title IStrategy Interface\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice BaseStrategy is the base contract that all strategies should inherit from and uses this interface."
							},
							"fullyImplemented": false,
							"id": 1307,
							"linearizedBaseContracts": [
								1307
							],
							"name": "IStrategy",
							"nameLocation": "4488:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IStrategy.Status",
									"documentation": {
										"id": 1144,
										"nodeType": "StructuredDocumentation",
										"src": "4598:62:3",
										"text": "@notice The Status enum that all recipients are based from"
									},
									"id": 1152,
									"members": [
										{
											"id": 1145,
											"name": "None",
											"nameLocation": "4687:4:3",
											"nodeType": "EnumValue",
											"src": "4687:4:3"
										},
										{
											"id": 1146,
											"name": "Pending",
											"nameLocation": "4701:7:3",
											"nodeType": "EnumValue",
											"src": "4701:7:3"
										},
										{
											"id": 1147,
											"name": "Accepted",
											"nameLocation": "4718:8:3",
											"nodeType": "EnumValue",
											"src": "4718:8:3"
										},
										{
											"id": 1148,
											"name": "Rejected",
											"nameLocation": "4736:8:3",
											"nodeType": "EnumValue",
											"src": "4736:8:3"
										},
										{
											"id": 1149,
											"name": "Appealed",
											"nameLocation": "4754:8:3",
											"nodeType": "EnumValue",
											"src": "4754:8:3"
										},
										{
											"id": 1150,
											"name": "InReview",
											"nameLocation": "4772:8:3",
											"nodeType": "EnumValue",
											"src": "4772:8:3"
										},
										{
											"id": 1151,
											"name": "Canceled",
											"nameLocation": "4790:8:3",
											"nodeType": "EnumValue",
											"src": "4790:8:3"
										}
									],
									"name": "Status",
									"nameLocation": "4670:6:3",
									"nodeType": "EnumDefinition",
									"src": "4665:139:3"
								},
								{
									"canonicalName": "IStrategy.PayoutSummary",
									"documentation": {
										"id": 1153,
										"nodeType": "StructuredDocumentation",
										"src": "4810:57:3",
										"text": "@notice Payout summary struct to hold the payout data"
									},
									"id": 1158,
									"members": [
										{
											"constant": false,
											"id": 1155,
											"mutability": "mutable",
											"name": "recipientAddress",
											"nameLocation": "4911:16:3",
											"nodeType": "VariableDeclaration",
											"scope": 1158,
											"src": "4903:24:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1154,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4903:7:3",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1157,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "4945:6:3",
											"nodeType": "VariableDeclaration",
											"scope": 1158,
											"src": "4937:14:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1156,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4937:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PayoutSummary",
									"nameLocation": "4879:13:3",
									"nodeType": "StructDefinition",
									"scope": 1307,
									"src": "4872:86:3",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1159,
										"nodeType": "StructuredDocumentation",
										"src": "5058:155:3",
										"text": "@notice Emitted when strategy is initialized.\n @param poolId The ID of the pool\n @param data The data passed to the 'initialize' function"
									},
									"eventSelector": "91efa3d50feccde0d0d202f8ae5c41ca0b2be614cebcb2bd2f4b019396e6568a",
									"id": 1165,
									"name": "Initialized",
									"nameLocation": "5224:11:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"indexed": false,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "5244:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1165,
												"src": "5236:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5236:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1163,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5258:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1165,
												"src": "5252:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1162,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5252:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5235:28:3"
									},
									"src": "5218:46:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1166,
										"nodeType": "StructuredDocumentation",
										"src": "5270:207:3",
										"text": "@notice Emitted when a recipient is registered.\n @param recipientId The ID of the recipient\n @param data The data passed to the 'registerRecipient' function\n @param sender The sender"
									},
									"eventSelector": "a197306e3dd5494a61a695381aa809a53b8e377a685e84e404a85d5a8da6cc62",
									"id": 1174,
									"name": "Registered",
									"nameLocation": "5488:10:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1168,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "5515:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "5499:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5499:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1170,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5534:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "5528:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1169,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5528:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1172,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5548:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "5540:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5540:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5498:57:3"
									},
									"src": "5482:74:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1175,
										"nodeType": "StructuredDocumentation",
										"src": "5562:188:3",
										"text": "@notice Emitted when a recipient is allocated to.\n @param recipientId The ID of the recipient\n @param amount The amount allocated\n @param token The token allocated"
									},
									"eventSelector": "463ffc2cf8b1596445c417388ed30e53eb67cf6668cb2be7f0addf8a78c8441b",
									"id": 1185,
									"name": "Allocated",
									"nameLocation": "5761:9:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1177,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "5787:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5771:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5771:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1179,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5808:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5800:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5800:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1181,
												"indexed": false,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5824:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5816:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1183,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5839:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5831:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5831:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5770:76:3"
									},
									"src": "5755:92:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1186,
										"nodeType": "StructuredDocumentation",
										"src": "5853:223:3",
										"text": "@notice Emitted when tokens are distributed.\n @param recipientId The ID of the recipient\n @param recipientAddress The recipient\n @param amount The amount distributed\n @param sender The sender"
									},
									"eventSelector": "b5b51454adfa840bd593658325a60a50b0216f12eb5d2937efe6cea935675b7d",
									"id": 1196,
									"name": "Distributed",
									"nameLocation": "6087:11:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientId",
												"nameLocation": "6115:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "6099:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6099:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1190,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipientAddress",
												"nameLocation": "6136:16:3",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "6128:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6128:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1192,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6162:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "6154:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6154:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1194,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "6178:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "6170:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6170:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6098:87:3"
									},
									"src": "6081:105:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1197,
										"nodeType": "StructuredDocumentation",
										"src": "6192:99:3",
										"text": "@notice Emitted when pool is set to active status.\n @param active The status of the pool"
									},
									"eventSelector": "d94c9bc4d43c51d8dc345a016d8e3d994432fac68e72832e4cf3a616bd8efae0",
									"id": 1201,
									"name": "PoolActive",
									"nameLocation": "6302:10:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1199,
												"indexed": false,
												"mutability": "mutable",
												"name": "active",
												"nameLocation": "6318:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "6313:11:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1198,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6313:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6312:13:3"
									},
									"src": "6296:30:3"
								},
								{
									"documentation": {
										"id": 1202,
										"nodeType": "StructuredDocumentation",
										"src": "6426:92:3",
										"text": "@notice Getter for the address of the Allo contract.\n @return The 'Allo' contract"
									},
									"functionSelector": "15cc481e",
									"id": 1208,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAllo",
									"nameLocation": "6532:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6539:2:3"
									},
									"returnParameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "6565:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAllo_$945",
													"typeString": "contract IAllo"
												},
												"typeName": {
													"id": 1205,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1204,
														"name": "IAllo",
														"nameLocations": [
															"6565:5:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 945,
														"src": "6565:5:3"
													},
													"referencedDeclaration": 945,
													"src": "6565:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAllo_$945",
														"typeString": "contract IAllo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6564:7:3"
									},
									"scope": 1307,
									"src": "6523:49:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1209,
										"nodeType": "StructuredDocumentation",
										"src": "6578:89:3",
										"text": "@notice Getter for the 'poolId' for this strategy.\n @return The ID of the pool"
									},
									"functionSelector": "38fff2d0",
									"id": 1214,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolId",
									"nameLocation": "6681:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6690:2:3"
									},
									"returnParameters": {
										"id": 1213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "6716:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6716:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6715:9:3"
									},
									"scope": 1307,
									"src": "6672:53:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1215,
										"nodeType": "StructuredDocumentation",
										"src": "6731:87:3",
										"text": "@notice Getter for the 'id' of the strategy.\n @return The ID of the strategy"
									},
									"functionSelector": "42fda9c7",
									"id": 1220,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getStrategyId",
									"nameLocation": "6832:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6845:2:3"
									},
									"returnParameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "6871:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1217,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6871:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6870:9:3"
									},
									"scope": 1307,
									"src": "6823:57:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1221,
										"nodeType": "StructuredDocumentation",
										"src": "6886:259:3",
										"text": "@notice Checks whether a allocator is valid or not, will usually be true for all strategies\n      and will depend on the strategy implementation.\n @param _allocator The allocator to check\n @return Whether the allocator is valid or not"
									},
									"functionSelector": "4d31d087",
									"id": 1228,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isValidAllocator",
									"nameLocation": "7159:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "_allocator",
												"nameLocation": "7184:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "7176:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7176:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7175:20:3"
									},
									"returnParameters": {
										"id": 1227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "7219:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1225,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7219:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7218:6:3"
									},
									"scope": 1307,
									"src": "7150:75:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1229,
										"nodeType": "StructuredDocumentation",
										"src": "7231:85:3",
										"text": "@notice whether pool is active.\n @return Whether the pool is active or not"
									},
									"functionSelector": "df868ed3",
									"id": 1234,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolActive",
									"nameLocation": "7330:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7342:2:3"
									},
									"returnParameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "7363:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1231,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7363:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7362:6:3"
									},
									"scope": 1307,
									"src": "7321:48:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1235,
										"nodeType": "StructuredDocumentation",
										"src": "7375:92:3",
										"text": "@notice Checks the amount of tokens in the pool.\n @return The balance of the pool"
									},
									"functionSelector": "4ab4ba42",
									"id": 1240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolAmount",
									"nameLocation": "7481:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7494:2:3"
									},
									"returnParameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "7520:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7520:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7519:9:3"
									},
									"scope": 1307,
									"src": "7472:57:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1241,
										"nodeType": "StructuredDocumentation",
										"src": "7535:104:3",
										"text": "@notice Increases the balance of the pool.\n @param _amount The amount to increase the pool by"
									},
									"functionSelector": "f5b0dfb7",
									"id": 1246,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increasePoolAmount",
									"nameLocation": "7653:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "7680:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1246,
												"src": "7672:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7672:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7671:17:3"
									},
									"returnParameters": {
										"id": 1245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7697:0:3"
									},
									"scope": 1307,
									"src": "7644:54:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1247,
										"nodeType": "StructuredDocumentation",
										"src": "7704:382:3",
										"text": "@notice Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation\n      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those\n      since there is no need for Pending or Rejected.\n @param _recipientId The ID of the recipient\n @return The status of the recipient"
									},
									"functionSelector": "eb11af93",
									"id": 1255,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRecipientStatus",
									"nameLocation": "8100:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "_recipientId",
												"nameLocation": "8127:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "8119:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8119:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8118:22:3"
									},
									"returnParameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "8164:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$1152",
													"typeString": "enum IStrategy.Status"
												},
												"typeName": {
													"id": 1252,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1251,
														"name": "Status",
														"nameLocations": [
															"8164:6:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1152,
														"src": "8164:6:3"
													},
													"referencedDeclaration": 1152,
													"src": "8164:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$1152",
														"typeString": "enum IStrategy.Status"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8163:8:3"
									},
									"scope": 1307,
									"src": "8091:81:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "8178:397:3",
										"text": "@notice Checks the amount allocated to a recipient for distribution.\n @dev Input the values you would send to distribute(), get the amounts each recipient in the array would receive.\n      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\n @param _recipientIds The IDs of the recipients\n @param _data The encoded data"
									},
									"functionSelector": "b2b878d0",
									"id": 1269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPayouts",
									"nameLocation": "8589:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "8617:13:3",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "8600:30:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1257,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8600:7:3",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1258,
													"nodeType": "ArrayTypeName",
													"src": "8600:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "8647:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "8632:20:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1260,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "8632:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1261,
													"nodeType": "ArrayTypeName",
													"src": "8632:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8599:54:3"
									},
									"returnParameters": {
										"id": 1268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "8701:22:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IStrategy.PayoutSummary[]"
												},
												"typeName": {
													"baseType": {
														"id": 1265,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1264,
															"name": "PayoutSummary",
															"nameLocations": [
																"8701:13:3"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1158,
															"src": "8701:13:3"
														},
														"referencedDeclaration": 1158,
														"src": "8701:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PayoutSummary_$1158_storage_ptr",
															"typeString": "struct IStrategy.PayoutSummary"
														}
													},
													"id": 1266,
													"nodeType": "ArrayTypeName",
													"src": "8701:15:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PayoutSummary_$1158_storage_$dyn_storage_ptr",
														"typeString": "struct IStrategy.PayoutSummary[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8700:24:3"
									},
									"scope": 1307,
									"src": "8580:145:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1270,
										"nodeType": "StructuredDocumentation",
										"src": "8825:270:3",
										"text": "@notice\n @dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,\n      use it, and then call super.initialize().\n @param _poolId The ID of the pool\n @param _data The encoded data"
									},
									"functionSelector": "edd146cc",
									"id": 1277,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "9109:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1272,
												"mutability": "mutable",
												"name": "_poolId",
												"nameLocation": "9128:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "9120:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9120:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1274,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "9150:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "9137:18:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1273,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9137:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9119:37:3"
									},
									"returnParameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9165:0:3"
									},
									"scope": 1307,
									"src": "9100:66:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1278,
										"nodeType": "StructuredDocumentation",
										"src": "9172:655:3",
										"text": "@notice This will register a recipient, set their status (and any other strategy specific values), and\n         return the ID of the recipient.\n @dev Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional\n      functions should be added to allow the owner to check this. The owner could also check attestations directly\n      and then accept for instance. The '_data' will be determined by the strategy implementation.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender\n @return The ID of the recipient"
									},
									"functionSelector": "2bbe0cae",
									"id": 1287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerRecipient",
									"nameLocation": "9841:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "9872:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "9859:18:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1279,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9859:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "9887:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "9879:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9879:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9858:37:3"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "9922:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9922:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9921:9:3"
									},
									"scope": 1307,
									"src": "9832:99:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1288,
										"nodeType": "StructuredDocumentation",
										"src": "9937:245:3",
										"text": "@notice This will allocate to a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"
									},
									"functionSelector": "ef2920fc",
									"id": 1295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allocate",
									"nameLocation": "10196:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10218:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "10205:18:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1289,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10205:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "10233:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "10225:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10225:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10204:37:3"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10258:0:3"
									},
									"scope": 1307,
									"src": "10187:72:3",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1296,
										"nodeType": "StructuredDocumentation",
										"src": "10265:271:3",
										"text": "@notice This will distribute funds (tokens) to recipients.\n @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\n this contract will need to track the amount paid already, so that it doesn't double pay."
									},
									"functionSelector": "0a6f0ee9",
									"id": 1306,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nameLocation": "10550:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "_recipientIds",
												"nameLocation": "10578:13:3",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "10561:30:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1297,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10561:7:3",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1298,
													"nodeType": "ArrayTypeName",
													"src": "10561:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1301,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10606:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "10593:18:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1300,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10593:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "10621:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "10613:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10613:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10560:69:3"
									},
									"returnParameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10638:0:3"
									},
									"scope": 1307,
									"src": "10541:98:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1308,
							"src": "4478:6163:3",
							"usedErrors": [],
							"usedEvents": [
								1165,
								1174,
								1185,
								1196,
								1201
							]
						}
					],
					"src": "42:10600:3"
				},
				"id": 3
			},
			"https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol": {
				"ast": {
					"absolutePath": "https://github.com/allo-protocol/allo-v2/blob/main/contracts/core/libraries/Metadata.sol",
					"exportedSymbols": {
						"Metadata": [
							1317
						]
					},
					"id": 1318,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1309,
							"literals": [
								"solidity",
								"0.8",
								".23"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:4"
						},
						{
							"canonicalName": "Metadata",
							"documentation": {
								"id": 1310,
								"nodeType": "StructuredDocumentation",
								"src": "4058:293:4",
								"text": "@title Metadata\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice Metadata is used to define the metadata for the protocol that is used throughout the system."
							},
							"id": 1317,
							"members": [
								{
									"constant": false,
									"id": 1313,
									"mutability": "mutable",
									"name": "protocol",
									"nameLocation": "4473:8:4",
									"nodeType": "VariableDeclaration",
									"scope": 1317,
									"src": "4465:16:4",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1312,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "4465:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1316,
									"mutability": "mutable",
									"name": "pointer",
									"nameLocation": "4570:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 1317,
									"src": "4563:14:4",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 1315,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "4563:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "Metadata",
							"nameLocation": "4358:8:4",
							"nodeType": "StructDefinition",
							"scope": 1318,
							"src": "4351:229:4",
							"visibility": "public"
						}
					],
					"src": "42:4539:4"
				},
				"id": 4
			}
		}
	}
}